{
  "commands": {
    "plugins/debt.py:18 debt()": {
      "function": "debt",
      "filename": "plugins/debt.py",
      "lineno": 18,
      "help": "debt -- returns the us national debt",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "debt"
      },
      "triggers": [
        "debt"
      ]
    },
    "plugins/fmylife.py:22 fml()": {
      "function": "fml",
      "filename": "plugins/fmylife.py",
      "lineno": 22,
      "help": "fml -- Gets a random quote from fmyfife.com.",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "fml"
      },
      "triggers": [
        "fml",
        "fmylife"
      ]
    },
    "plugins/nfl.py:50 nfl()": {
      "function": "nfl",
      "filename": "plugins/nfl.py",
      "lineno": 50,
      "help": "nfl [team abbreviation] -- Returns all matchups for current week, or only for a specified team's matchup",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "nfl"
      },
      "triggers": [
        "nfl"
      ]
    },
    "plugins/hashtags.py:29 remember()": {
      "function": "remember",
      "filename": "plugins/hashtags.py",
      "lineno": 29,
      "help": "remember <word> <data> -- Remembers <data> with <word>.",
      "args": [
        "inp",
        "nick",
        "db",
        "say",
        "input",
        "notice"
      ],
      "hook": {
        "adminonly": false,
        "name": "remember"
      },
      "triggers": [
        "remember",
        "r",
        "learn"
      ]
    },
    "plugins/hashtags.py:76 forget()": {
      "function": "forget",
      "filename": "plugins/hashtags.py",
      "lineno": 76,
      "help": "forget <word> -- Forgets a remembered <word>.",
      "args": [
        "inp",
        "db",
        "input",
        "notice"
      ],
      "hook": {
        "adminonly": true,
        "name": "forget"
      },
      "triggers": [
        "forget",
        "f"
      ]
    },
    "plugins/hashtags.py:94 info()": {
      "function": "info",
      "filename": "plugins/hashtags.py",
      "lineno": 94,
      "help": "info <word> -- Shows the source of a factoid.",
      "args": [
        "inp",
        "notice",
        "db"
      ],
      "hook": {
        "name": "info"
      },
      "triggers": [
        "info"
      ]
    },
    "plugins/hashtags.py:165 hashes()": {
      "function": "hashes",
      "filename": "plugins/hashtags.py",
      "lineno": 165,
      "help": "hashes -- Shows hash names for all known hashes.",
      "args": [
        "inp",
        "say",
        "db",
        "bot",
        "me",
        "conn",
        "input"
      ],
      "hook": {
        "autohelp": false,
        "name": "hashes"
      },
      "triggers": [
        "hashes",
        "key",
        "keys"
      ]
    },
    "plugins/bank.py:70 bank()": {
      "function": "bank",
      "filename": "plugins/bank.py",
      "lineno": 70,
      "help": "bank -- check the balance in your TaigaBank(tm) Account(r). also opens a new account if you dont have one",
      "args": [
        "inp",
        "nick",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "name": "bank"
      },
      "triggers": [
        "bank"
      ]
    },
    "plugins/bank.py:81 peachypeach()": {
      "function": "peachypeach",
      "filename": "plugins/bank.py",
      "lineno": 81,
      "help": "peachypeach <nick>: send one (1) peachy peach to nick",
      "args": [
        "inp",
        "nick",
        "db",
        "me",
        "notice"
      ],
      "hook": {
        "name": "peachypeach"
      },
      "triggers": [
        "peachypeach"
      ]
    },
    "plugins/bank.py:105 roseyrose()": {
      "function": "roseyrose",
      "filename": "plugins/bank.py",
      "lineno": 105,
      "help": "roseyrose <nick>: send one (1) rosey rose to nick",
      "args": [
        "inp",
        "nick",
        "db",
        "me",
        "notice"
      ],
      "hook": {
        "name": "roseyrose"
      },
      "triggers": [
        "roseyrose"
      ]
    },
    "plugins/bank.py:132 daddiescummies()": {
      "function": "daddiescummies",
      "filename": "plugins/bank.py",
      "lineno": 132,
      "help": "daddiescummies <nick>: send one (1) daddies cummies to nick",
      "args": [
        "inp",
        "nick",
        "db",
        "me",
        "notice"
      ],
      "hook": {
        "name": "daddiescummies"
      },
      "triggers": [
        "daddiescummies"
      ]
    },
    "plugins/bank.py:156 bene()": {
      "function": "bene",
      "filename": "plugins/bank.py",
      "lineno": 156,
      "help": "bene -- claim one (1) free thing every few minutes",
      "args": [
        "inp",
        "nick",
        "db",
        "me",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "bene"
      },
      "triggers": [
        "bene"
      ]
    },
    "plugins/times.py:7 times()": {
      "function": "times",
      "filename": "plugins/times.py",
      "lineno": 7,
      "help": "times -- Shows times around the world.",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "autohelp": false,
        "name": "times"
      },
      "triggers": [
        "times"
      ]
    },
    "plugins/lastfm.py:5 band()": {
      "function": "band",
      "filename": "plugins/lastfm.py",
      "lineno": 5,
      "help": null,
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "band"
      },
      "triggers": [
        "band"
      ]
    },
    "plugins/lastfm.py:28 lastfm()": {
      "function": "lastfm",
      "filename": "plugins/lastfm.py",
      "lineno": 28,
      "help": "lastfm [username|@nick] -- Displays the current/last played track.",
      "args": [
        "inp",
        "db",
        "bot",
        "reply",
        "chan",
        "notice",
        "nick",
        "conn"
      ],
      "hook": {
        "autohelp": false,
        "name": "lastfm"
      },
      "triggers": [
        "lastfm",
        "np"
      ]
    },
    "plugins/4chan.py:106 catalog()": {
      "function": "catalog",
      "filename": "plugins/4chan.py",
      "lineno": 106,
      "help": "catalog <board> <regex> -- Search all OP posts on the catalog of a board, and return matching results",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "catalog"
      },
      "triggers": [
        "catalog",
        "4chan"
      ]
    },
    "plugins/4chan.py:136 board()": {
      "function": "board",
      "filename": "plugins/4chan.py",
      "lineno": 136,
      "help": "board <board> <regex> -- Search all the posts on a board and return matching results",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "board"
      },
      "triggers": [
        "board"
      ]
    },
    "plugins/4chan.py:166 bs()": {
      "function": "bs",
      "filename": "plugins/4chan.py",
      "lineno": 166,
      "help": "bs -- Returns current battlestation threads on /g/",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "bs"
      },
      "triggers": [
        "bs"
      ]
    },
    "plugins/4chan.py:172 desktops()": {
      "function": "desktops",
      "filename": "plugins/4chan.py",
      "lineno": 172,
      "help": "desktop -- Returns current desktop threads on /g/",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "desktops"
      },
      "triggers": [
        "desktops"
      ]
    },
    "plugins/4chan.py:178 britbong()": {
      "function": "britbong",
      "filename": "plugins/4chan.py",
      "lineno": 178,
      "help": "britbong -- find latest britbong thread on /pol/",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "britbong"
      },
      "triggers": [
        "britbong"
      ]
    },
    "plugins/seen.py:102 seen()": {
      "function": "seen",
      "filename": "plugins/seen.py",
      "lineno": 102,
      "help": "seen <nick> -- Tell when a nickname was last in active in one of this bot's channels.",
      "args": [
        "inp",
        "nick",
        "chan",
        "db",
        "conn",
        "bot"
      ],
      "hook": {
        "name": "seen"
      },
      "triggers": [
        "seen"
      ]
    },
    "plugins/reminder.py:4 reminder()": {
      "function": "reminder",
      "filename": "plugins/reminder.py",
      "lineno": 4,
      "help": "reminder <time> <message> -- reminds you of <message>. the time argument accepts minutes, hours, days, etc",
      "args": [
        "inp",
        "nick",
        "conn"
      ],
      "hook": {
        "name": "reminder"
      },
      "triggers": [
        "reminder",
        "remind"
      ]
    },
    "plugins/metacritic.py:8 metacritic()": {
      "function": "metacritic",
      "filename": "plugins/metacritic.py",
      "lineno": 8,
      "help": "mc [all|movie|tv|album|x360|ps3|wii|pc|ds|3ds|vita] <title> -- Gets rating for <title> from metacritic on the specified medium.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "metacritic"
      },
      "triggers": [
        "metacritic",
        "mc"
      ]
    },
    "plugins/marketing.py:9 marketing()": {
      "function": "marketing",
      "filename": "plugins/marketing.py",
      "lineno": 9,
      "help": "marketing -- show some marketing bullshit",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "marketing"
      },
      "triggers": [
        "marketing"
      ]
    },
    "plugins/todo.py:92 todo()": {
      "function": "todo",
      "filename": "plugins/todo.py",
      "lineno": 92,
      "help": "todo <add|del|list|search> [args] -- Manipulates your list of todos.",
      "args": [
        "inp",
        "nick",
        "chan",
        "db",
        "notice",
        "bot"
      ],
      "hook": {
        "name": "todo"
      },
      "triggers": [
        "todo"
      ]
    },
    "plugins/gelbooru.py:53 gelbooru()": {
      "function": "gelbooru",
      "filename": "plugins/gelbooru.py",
      "lineno": 53,
      "help": "gelbooru <tags> -- Gets a random image from gelbooru.com",
      "args": [
        "inp",
        "reply",
        "input"
      ],
      "hook": {
        "autohelp": false,
        "name": "gelbooru"
      },
      "triggers": [
        "gelbooru",
        "futanari",
        "futa",
        "trap",
        "shotacon",
        "shota",
        "lolicon",
        "loli",
        "gb"
      ]
    },
    "plugins/countdown.py:19 countdown()": {
      "function": "countdown",
      "filename": "plugins/countdown.py",
      "lineno": 19,
      "help": "countdown [seconds] [nick1 nick2 nick3] -- starts a countdown. It will begin when all the users type .ready",
      "args": [
        "inp",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "countdown"
      },
      "triggers": [
        "countdown"
      ]
    },
    "plugins/countdown.py:70 ready()": {
      "function": "ready",
      "filename": "plugins/countdown.py",
      "lineno": 70,
      "help": "ready -- when all users are ready the countdown will begin.",
      "args": [
        "inp",
        "me",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "ready"
      },
      "triggers": [
        "ready"
      ]
    },
    "plugins/radio.py:33 radio()": {
      "function": "radio",
      "filename": "plugins/radio.py",
      "lineno": 33,
      "help": "radio <name> -- look up what's playing on an icecast radio",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "radio"
      },
      "triggers": [
        "radio"
      ]
    },
    "plugins/radio.py:76 aradio()": {
      "function": "aradio",
      "filename": "plugins/radio.py",
      "lineno": 76,
      "help": "aradio -- show currently playing song from r/a/dio",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "aradio"
      },
      "triggers": [
        "aradio"
      ]
    },
    "plugins/radio.py:85 muradio()": {
      "function": "muradio",
      "filename": "plugins/radio.py",
      "lineno": 85,
      "help": "muradio -- Returns current mutantradio song",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "mutantradio",
        "autohelp": false
      },
      "triggers": [
        "mutantradio",
        "muradio"
      ]
    },
    "plugins/twitter.py:56 twitter()": {
      "function": "twitter",
      "filename": "plugins/twitter.py",
      "lineno": 56,
      "help": "twitter <user> [n] -- Gets last/[n]th tweet from <user>",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "twitter"
      },
      "triggers": [
        "twitter",
        "twatter",
        "tw"
      ]
    },
    "plugins/twitter.py:141 twuser()": {
      "function": "twuser",
      "filename": "plugins/twitter.py",
      "lineno": 141,
      "help": "twuser <user> -- Get info on the Twitter user <user>",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "twuser"
      },
      "triggers": [
        "twuser",
        "twinfo"
      ]
    },
    "plugins/media.py:124 tv()": {
      "function": "tv",
      "filename": "plugins/media.py",
      "lineno": 124,
      "help": "tv <series> -- get info for the <series>",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "series"
      },
      "triggers": [
        "series",
        "show",
        "tv"
      ]
    },
    "plugins/media.py:132 tv_next()": {
      "function": "tv_next",
      "filename": "plugins/media.py",
      "lineno": 132,
      "help": "tv_next <series> -- get the next episode of <series>",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "tv_next"
      },
      "triggers": [
        "tv_next",
        "next"
      ]
    },
    "plugins/media.py:179 tv_last()": {
      "function": "tv_last",
      "filename": "plugins/media.py",
      "lineno": 179,
      "help": "tv_last <series> -- gets the most recently aired episode of <series>",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "last"
      },
      "triggers": [
        "last",
        "prev",
        "tv_prev",
        "tv_last"
      ]
    },
    "plugins/media.py:221 imdb()": {
      "function": "imdb",
      "filename": "plugins/media.py",
      "lineno": 221,
      "help": "imdb <movie> -- Gets information about <movie> from IMDb.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "imdb"
      },
      "triggers": [
        "imdb",
        "movie"
      ]
    },
    "plugins/media.py:283 rottentomatoes()": {
      "function": "rottentomatoes",
      "filename": "plugins/media.py",
      "lineno": 283,
      "help": "rt <title> -- gets ratings for <title> from Rotten Tomatoes",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "rottentomatoes"
      },
      "triggers": [
        "rottentomatoes",
        "rt"
      ]
    },
    "plugins/heartbleed.py:257 heartbleed()": {
      "function": "heartbleed",
      "filename": "plugins/heartbleed.py",
      "lineno": 257,
      "help": "heartbleed <host> -- scan the given host for a heartbleed vulnerability",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "heartbleed"
      },
      "triggers": [
        "heartbleed"
      ]
    },
    "plugins/quote.py:199 quote()": {
      "function": "quote",
      "filename": "plugins/quote.py",
      "lineno": 199,
      "help": "quote [add] <#chan | nick> [-r] [query | number]",
      "args": [
        "inp",
        "nick",
        "chan",
        "db",
        "notice",
        "reply",
        "bot"
      ],
      "hook": {
        "name": "quote"
      },
      "triggers": [
        "quote",
        "q"
      ]
    },
    "plugins/quote.py:263 rquote()": {
      "function": "rquote",
      "filename": "plugins/quote.py",
      "lineno": 263,
      "help": "rquote <nick> <number/*> - Deletes a quote from a nick",
      "args": [
        "inp",
        "db",
        "notice",
        "nick",
        "bot",
        "reply"
      ],
      "hook": {
        "adminonly": true,
        "name": "rquote"
      },
      "triggers": [
        "rquote"
      ]
    },
    "plugins/quote.py:308 quotechan()": {
      "function": "quotechan",
      "filename": "plugins/quote.py",
      "lineno": 308,
      "help": "quotechan <#channel> <search>: search some shit in an entire channel",
      "args": [
        "inp",
        "chan",
        "db",
        "reply"
      ],
      "hook": {
        "name": "qchan"
      },
      "triggers": [
        "qchan"
      ]
    },
    "plugins/geoip.py:17 geoip()": {
      "function": "geoip",
      "filename": "plugins/geoip.py",
      "lineno": 17,
      "help": "geoip <host|ip> -- Gets the location of <host> or <ip>",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "geoip"
      },
      "triggers": [
        "geoip"
      ]
    },
    "plugins/coins.py:45 cryptocoin()": {
      "function": "cryptocoin",
      "filename": "plugins/coins.py",
      "lineno": 45,
      "help": "cryptocoin [name] -- show a crypto coin's prices",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "cryptocoin"
      },
      "triggers": [
        "cryptocoin",
        "cg"
      ]
    },
    "plugins/coins.py:90 btc()": {
      "function": "btc",
      "filename": "plugins/coins.py",
      "lineno": 90,
      "help": "btc -- show bitcoin's prices",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "btc"
      },
      "triggers": [
        "btc",
        "bitcoin"
      ]
    },
    "plugins/coins.py:96 eth()": {
      "function": "eth",
      "filename": "plugins/coins.py",
      "lineno": 96,
      "help": "eth -- show ethereum's prices",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "eth"
      },
      "triggers": [
        "eth",
        "ethereum"
      ]
    },
    "plugins/coins.py:106 doge()": {
      "function": "doge",
      "filename": "plugins/coins.py",
      "lineno": 106,
      "help": "who even cares about dogecoin in 2022 lmfao",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "doge"
      },
      "triggers": [
        "doge"
      ]
    },
    "plugins/dice.py:36 dice()": {
      "function": "dice",
      "filename": "plugins/dice.py",
      "lineno": 36,
      "help": "dice <diceroll> -- Simulates dicerolls. Example: '2d20-d5+4' = roll 2 D20s, subtract 1D5, add 4",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "dice"
      },
      "triggers": [
        "dice",
        "roll"
      ]
    },
    "plugins/utility.py:39 capitalize()": {
      "function": "capitalize",
      "filename": "plugins/utility.py",
      "lineno": 39,
      "help": "capitalize <string> -- Capitalizes <string>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "capitalize"
      },
      "triggers": [
        "capitalize",
        "capitalise"
      ]
    },
    "plugins/utility.py:46 upper()": {
      "function": "upper",
      "filename": "plugins/utility.py",
      "lineno": 46,
      "help": "upper <string> -- Convert string to uppercase.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "upper"
      },
      "triggers": [
        "upper"
      ]
    },
    "plugins/utility.py:52 lower()": {
      "function": "lower",
      "filename": "plugins/utility.py",
      "lineno": 52,
      "help": "lower <string> -- Convert string to lowercase.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "lower"
      },
      "triggers": [
        "lower"
      ]
    },
    "plugins/utility.py:58 titlecase()": {
      "function": "titlecase",
      "filename": "plugins/utility.py",
      "lineno": 58,
      "help": "title <string> -- Convert string to title case.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "titlecase"
      },
      "triggers": [
        "titlecase"
      ]
    },
    "plugins/utility.py:64 swapcase()": {
      "function": "swapcase",
      "filename": "plugins/utility.py",
      "lineno": 64,
      "help": "swapcase <string> -- Swaps the capitalization of <string>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "swapcase"
      },
      "triggers": [
        "swapcase"
      ]
    },
    "plugins/utility.py:123 length()": {
      "function": "length",
      "filename": "plugins/utility.py",
      "lineno": 123,
      "help": "length <string> -- gets the length of <string>",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "length"
      },
      "triggers": [
        "length"
      ]
    },
    "plugins/utility.py:130 reverse()": {
      "function": "reverse",
      "filename": "plugins/utility.py",
      "lineno": 130,
      "help": "reverse <string> -- reverses <string>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "reverse"
      },
      "triggers": [
        "reverse"
      ]
    },
    "plugins/utility.py:137 hash()": {
      "function": "hash",
      "filename": "plugins/utility.py",
      "lineno": 137,
      "help": "hash <string> -- Returns hashes of <string>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "hash"
      },
      "triggers": [
        "hash"
      ]
    },
    "plugins/utility.py:144 munge()": {
      "function": "munge",
      "filename": "plugins/utility.py",
      "lineno": 144,
      "help": "munge <text> -- Munges up <text>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "munge"
      },
      "triggers": [
        "munge"
      ]
    },
    "plugins/utility.py:167 rainbow()": {
      "function": "rainbow",
      "filename": "plugins/utility.py",
      "lineno": 167,
      "help": "rainbow <text> -- makes your text gay",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "rainbow"
      },
      "triggers": [
        "rainbow",
        "gay"
      ]
    },
    "plugins/utility.py:174 gaycow()": {
      "function": "gaycow",
      "filename": "plugins/utility.py",
      "lineno": 174,
      "help": "gaycow <text> -- cowsay, but gay",
      "args": [
        "inp",
        "reply"
      ],
      "hook": {
        "name": "gaycow"
      },
      "triggers": [
        "gaycow"
      ]
    },
    "plugins/utility.py:188 wrainbow()": {
      "function": "wrainbow",
      "filename": "plugins/utility.py",
      "lineno": 188,
      "help": "wrainbow <text> -- makes your text rainbow, separated by words",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "wrainbow"
      },
      "triggers": [
        "wrainbow"
      ]
    },
    "plugins/utility.py:201 usa()": {
      "function": "usa",
      "filename": "plugins/utility.py",
      "lineno": 201,
      "help": "usa <text> -- makes your text alternate between red, white and blue. yeah its usa but it works for like 9 countries",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "usa"
      },
      "triggers": [
        "usa",
        "uk"
      ]
    },
    "plugins/tell.py:53 showtells()": {
      "function": "showtells",
      "filename": "plugins/tell.py",
      "lineno": 53,
      "help": "showtells -- View all pending tell messages (sent in a notice).",
      "args": [
        "inp",
        "nick",
        "chan",
        "notice",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "name": "showtells"
      },
      "triggers": [
        "showtells"
      ]
    },
    "plugins/tell.py:74 tell()": {
      "function": "tell",
      "filename": "plugins/tell.py",
      "lineno": 74,
      "help": "tell <nick> <message> -- Relay <message> to <nick> when <nick> is around.",
      "args": [
        "inp",
        "nick",
        "chan",
        "db",
        "input",
        "notice"
      ],
      "hook": {
        "name": "tell"
      },
      "triggers": [
        "tell",
        "ask"
      ]
    },
    "plugins/amazon.py:70 amazon()": {
      "function": "amazon",
      "filename": "plugins/amazon.py",
      "lineno": 70,
      "help": "amazon [query] -- Searches amazon for query",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "amazon"
      },
      "triggers": [
        "amazon"
      ]
    },
    "plugins/newegg.py:71 newegg()": {
      "function": "newegg",
      "filename": "plugins/newegg.py",
      "lineno": 71,
      "help": "newegg <item name> -- Searches newegg.com for <item name>",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "newegg"
      },
      "triggers": [
        "newegg"
      ]
    },
    "plugins/distance.py:30 distance()": {
      "function": "distance",
      "filename": "plugins/distance.py",
      "lineno": 30,
      "help": "distance <start> to <end> -- Calculate the distance between 2 places.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "distance"
      },
      "triggers": [
        "distance"
      ]
    },
    "plugins/twitch.py:51 twitch()": {
      "function": "twitch",
      "filename": "plugins/twitch.py",
      "lineno": 51,
      "help": "twitch <username> -- gets user and channel info about a twitch.tv streamer",
      "args": [
        "inp",
        "bot",
        "reply"
      ],
      "hook": {
        "name": "twitch"
      },
      "triggers": [
        "twitch"
      ]
    },
    "plugins/mediawiki.py:96 drama()": {
      "function": "drama",
      "filename": "plugins/mediawiki.py",
      "lineno": 96,
      "help": "drama <article> -- search an Encyclopedia Dramatica article",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "drama"
      },
      "triggers": [
        "drama",
        "encyclopediadramatica"
      ]
    },
    "plugins/mediawiki.py:109 wikipedia()": {
      "function": "wikipedia",
      "filename": "plugins/mediawiki.py",
      "lineno": 109,
      "help": "wikipedia <article> -- search a wikipedia article",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "wikipedia"
      },
      "triggers": [
        "wikipedia",
        "wiki"
      ]
    },
    "plugins/core_sieve.py:13 ledzep()": {
      "function": "ledzep",
      "filename": "plugins/core_sieve.py",
      "lineno": 13,
      "help": null,
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "ledzep"
      },
      "triggers": [
        "ledzep"
      ]
    },
    "plugins/core_sieve.py:19 sudos()": {
      "function": "sudos",
      "filename": "plugins/core_sieve.py",
      "lineno": 19,
      "help": null,
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "sudos"
      },
      "triggers": [
        "sudos"
      ]
    },
    "plugins/calculator.py:109 c()": {
      "function": "c",
      "filename": "plugins/calculator.py",
      "lineno": 109,
      "help": "c [equation] -- calculates equation with custom calculator",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "c"
      },
      "triggers": [
        "c"
      ]
    },
    "plugins/validate.py:8 validate()": {
      "function": "validate",
      "filename": "plugins/validate.py",
      "lineno": 8,
      "help": "validate <url> -- Runs url through the w3c markup validator.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "validate"
      },
      "triggers": [
        "validate",
        "w3c"
      ]
    },
    "plugins/core_ctcp.py:38 ctcp()": {
      "function": "ctcp",
      "filename": "plugins/core_ctcp.py",
      "lineno": 38,
      "help": "ctcp <destination> <command> -- Send a CTCP command",
      "args": [
        "inp",
        "conn"
      ],
      "hook": {
        "adminonly": true,
        "name": "ctcp"
      },
      "triggers": [
        "ctcp"
      ]
    },
    "plugins/core_ctcp.py:48 version()": {
      "function": "version",
      "filename": "plugins/core_ctcp.py",
      "lineno": 48,
      "help": "version [nick] -- Returns a client's version (ctcp)",
      "args": [
        "inp",
        "nick",
        "chan",
        "conn"
      ],
      "hook": {
        "autohelp": false,
        "name": "version"
      },
      "triggers": [
        "version",
        "ver"
      ]
    },
    "plugins/core_ctcp.py:64 ping()": {
      "function": "ping",
      "filename": "plugins/core_ctcp.py",
      "lineno": 64,
      "help": "ping [nick] -- ping a client (ctcp)",
      "args": [
        "inp",
        "nick",
        "chan",
        "conn",
        "reply"
      ],
      "hook": {
        "autohelp": false,
        "name": "ping"
      },
      "triggers": [
        "ping",
        "pingme"
      ]
    },
    "plugins/core_ctcp.py:78 pingip()": {
      "function": "pingip",
      "filename": "plugins/core_ctcp.py",
      "lineno": 78,
      "help": "ping <host> [count] -- Pings <host> [count] times.",
      "args": [
        "inp",
        "reply"
      ],
      "hook": {
        "adminonly": true,
        "name": "pingip"
      },
      "triggers": [
        "pingip"
      ]
    },
    "plugins/core_ctcp.py:148 host()": {
      "function": "host",
      "filename": "plugins/core_ctcp.py",
      "lineno": 148,
      "help": "host [nick] -- find a nick's hostname",
      "args": [
        "inp",
        "nick",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "name": "host"
      },
      "triggers": [
        "host"
      ]
    },
    "plugins/core_ctcp.py:171 fhost()": {
      "function": "fhost",
      "filename": "plugins/core_ctcp.py",
      "lineno": 171,
      "help": "fhost [nick] -- find a nick's hostname",
      "args": [
        "inp",
        "nick",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "name": "fhost"
      },
      "triggers": [
        "fhost"
      ]
    },
    "plugins/core_ctcp.py:179 trolltest()": {
      "function": "trolltest",
      "filename": "plugins/core_ctcp.py",
      "lineno": 179,
      "help": "trolltest -- check if Havixil should be trolled",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "trolltest"
      },
      "triggers": [
        "trolltest"
      ]
    },
    "plugins/coin.py:6 coin()": {
      "function": "coin",
      "filename": "plugins/coin.py",
      "lineno": 6,
      "help": "coin [amount] -- Flips [amount] of coins.",
      "args": [
        "inp",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "coin"
      },
      "triggers": [
        "coin"
      ]
    },
    "plugins/urbandict.py:50 urban()": {
      "function": "urban",
      "filename": "plugins/urbandict.py",
      "lineno": 50,
      "help": "urban <phrase> [entry] -- Looks up <phrase> on urbandictionary.com.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "urban"
      },
      "triggers": [
        "urban",
        "ebonics",
        "nig",
        "ud",
        "u"
      ]
    },
    "plugins/openai.py:94 gptping()": {
      "function": "gptping",
      "filename": "plugins/openai.py",
      "lineno": 94,
      "help": "gptping -- measures the time it takes to run an empty chatgpt command",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "gptping"
      },
      "triggers": [
        "gptping"
      ]
    },
    "plugins/openai.py:109 gpt()": {
      "function": "gpt",
      "filename": "plugins/openai.py",
      "lineno": 109,
      "help": "gpt <query> -- ask chatgpt something. see also gptuwu, gptunsafe",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gpt"
      },
      "triggers": [
        "gpt"
      ]
    },
    "plugins/openai.py:117 explain()": {
      "function": "explain",
      "filename": "plugins/openai.py",
      "lineno": 117,
      "help": "explain <query> -- tells chatgpt to explain something",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "explain"
      },
      "triggers": [
        "explain"
      ]
    },
    "plugins/openai.py:124 gptuwu()": {
      "function": "gptuwu",
      "filename": "plugins/openai.py",
      "lineno": 124,
      "help": "gptuwu <query> -- talk to chatgpt with a cute e-girl uwu personality",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gptuwu"
      },
      "triggers": [
        "gptuwu"
      ]
    },
    "plugins/openai.py:134 gptunsafe()": {
      "function": "gptunsafe",
      "filename": "plugins/openai.py",
      "lineno": 134,
      "help": "gptunsafe <query> -- talk to chatgpt but try to break the censorship (with a prompt jailbreak)",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gptunsafe"
      },
      "triggers": [
        "gptunsafe"
      ]
    },
    "plugins/openai.py:144 gptveryunsafe()": {
      "function": "gptveryunsafe",
      "filename": "plugins/openai.py",
      "lineno": 144,
      "help": "gptveryunsafe <query> -- talk to chatgpt but really try to break the censorship (with a prompt jailbreak and high temperature)",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gptveryunsafe"
      },
      "triggers": [
        "gptveryunsafe"
      ]
    },
    "plugins/openai.py:154 gptveryveryunsafe()": {
      "function": "gptveryveryunsafe",
      "filename": "plugins/openai.py",
      "lineno": 154,
      "help": "gptveryunsafe <query> -- talk to chatgpt but just straight up break the censorship (might return gibberish)",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gptveryveryunsafe"
      },
      "triggers": [
        "gptveryveryunsafe"
      ]
    },
    "plugins/openai.py:164 dalle()": {
      "function": "dalle",
      "filename": "plugins/openai.py",
      "lineno": 164,
      "help": "dalle <description> -- generate an image using openai's dall-e",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "dalle"
      },
      "triggers": [
        "dalle"
      ]
    },
    "plugins/openai.py:177 gpt4chan()": {
      "function": "gpt4chan",
      "filename": "plugins/openai.py",
      "lineno": 177,
      "help": "gpt4chan <query> -- talk to chatgpt using a hateful internet persona",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gpt4chan"
      },
      "triggers": [
        "gpt4chan"
      ]
    },
    "plugins/openai.py:186 gptIT()": {
      "function": "gptIT",
      "filename": "plugins/openai.py",
      "lineno": 186,
      "help": "gptIT <query> -- talk to chatgpt to try to solve your computer problems",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gptIT"
      },
      "triggers": [
        "gptIT"
      ]
    },
    "plugins/openai.py:195 gptgptgen()": {
      "function": "gptgptgen",
      "filename": "plugins/openai.py",
      "lineno": 195,
      "help": "gptgptgen <description> -- ask chatgpt to generate a gpt prompt based on your description",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gptgptgen"
      },
      "triggers": [
        "gptgptgen"
      ]
    },
    "plugins/openai.py:204 gupta()": {
      "function": "gupta",
      "filename": "plugins/openai.py",
      "lineno": 204,
      "help": "gupta <query> -- talk to chatgpt using a horny indian tech support personality",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gupta"
      },
      "triggers": [
        "gupta"
      ]
    },
    "plugins/openai.py:213 gptemoji()": {
      "function": "gptemoji",
      "filename": "plugins/openai.py",
      "lineno": 213,
      "help": "gptemoji <query> -- talk to chatgpt but only reply with emojis",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "name": "gptemoji"
      },
      "triggers": [
        "gptemoji"
      ]
    },
    "plugins/cypher.py:12 cypher()": {
      "function": "cypher",
      "filename": "plugins/cypher.py",
      "lineno": 12,
      "help": "cypher <pass> <string> -- Cyphers <string> with <password>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "cypher"
      },
      "triggers": [
        "cypher"
      ]
    },
    "plugins/cypher.py:42 decypher()": {
      "function": "decypher",
      "filename": "plugins/cypher.py",
      "lineno": 42,
      "help": "decypher <pass> <string> -- Decyphers <string> with <password>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "decypher"
      },
      "triggers": [
        "decypher"
      ]
    },
    "plugins/core_tests.py:8 test_docstrings()": {
      "function": "test_docstrings",
      "filename": "plugins/core_tests.py",
      "lineno": 8,
      "help": "test: make sure all commands have a docstring. docstrings are used for help commands",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "adminonly": true,
        "autohelp": false,
        "name": "test_docstrings"
      },
      "triggers": [
        "test_docstrings"
      ]
    },
    "plugins/core_tests.py:43 test_function_definition()": {
      "function": "test_function_definition",
      "filename": "plugins/core_tests.py",
      "lineno": 43,
      "help": null,
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "adminonly": true,
        "name": "test_function_definition"
      },
      "triggers": [
        "test_function_definition"
      ]
    },
    "plugins/core_tests.py:64 export_plugins_json()": {
      "function": "export_plugins_json",
      "filename": "plugins/core_tests.py",
      "lineno": 64,
      "help": null,
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "adminonly": true,
        "name": "export_plugins_json"
      },
      "triggers": [
        "export_plugins_json"
      ]
    },
    "plugins/bash.py:42 bash()": {
      "function": "bash",
      "filename": "plugins/bash.py",
      "lineno": 42,
      "help": "bash <id> -- Gets a random quote from Bash.org, or returns a specific id.",
      "args": [
        "inp",
        "reply"
      ],
      "hook": {
        "autohelp": false,
        "name": "bash"
      },
      "triggers": [
        "bash"
      ]
    },
    "plugins/kernel.py:8 kernel()": {
      "function": "kernel",
      "filename": "plugins/kernel.py",
      "lineno": 8,
      "help": "kernel -- show latest linux kernel versions",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "kernel"
      },
      "triggers": [
        "kernel"
      ]
    },
    "plugins/core_admin_global.py:9 gadmins()": {
      "function": "gadmins",
      "filename": "plugins/core_admin_global.py",
      "lineno": 9,
      "help": "gadmins -- Lists bot's global admins.",
      "args": [
        "inp",
        "notice",
        "bot"
      ],
      "hook": {
        "autohelp": false,
        "adminonly": true,
        "name": "gadmins"
      },
      "triggers": [
        "gadmins"
      ]
    },
    "plugins/core_admin_global.py:19 gadmin()": {
      "function": "gadmin",
      "filename": "plugins/core_admin_global.py",
      "lineno": 19,
      "help": "gadmin <add|del> <nick|host> -- Make <nick|host> an global admin (you can delete multiple admins at once)",
      "args": [
        "inp",
        "notice",
        "bot",
        "config",
        "db"
      ],
      "hook": {
        "adminonly": true,
        "name": "gadmin"
      },
      "triggers": [
        "gadmin"
      ]
    },
    "plugins/core_admin_global.py:56 gdisabled()": {
      "function": "gdisabled",
      "filename": "plugins/core_admin_global.py",
      "lineno": 56,
      "help": "gdisabled -- Lists globally disabled commands.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "adminonly": true,
        "autohelp": false,
        "name": "gdisabled"
      },
      "triggers": [
        "gdisabled"
      ]
    },
    "plugins/core_admin_global.py:67 gdisable()": {
      "function": "gdisable",
      "filename": "plugins/core_admin_global.py",
      "lineno": 67,
      "help": "gdisable <commands> -- Makes the bot globally disable a command.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "adminonly": true,
        "name": "gdisable"
      },
      "triggers": [
        "gdisable"
      ]
    },
    "plugins/core_admin_global.py:86 genable()": {
      "function": "genable",
      "filename": "plugins/core_admin_global.py",
      "lineno": 86,
      "help": "genable <commands> -- Enables currently globally disabled commands",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "adminonly": true,
        "name": "genable"
      },
      "triggers": [
        "genable"
      ]
    },
    "plugins/core_admin_global.py:109 gignored()": {
      "function": "gignored",
      "filename": "plugins/core_admin_global.py",
      "lineno": 109,
      "help": "gignored [channel]-- Lists ignored channels/nicks/hosts.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "adminonly": true,
        "autohelp": false,
        "name": "gignored"
      },
      "triggers": [
        "gignored"
      ]
    },
    "plugins/core_admin_global.py:119 gignore()": {
      "function": "gignore",
      "filename": "plugins/core_admin_global.py",
      "lineno": 119,
      "help": "gignore <nick|host> -- Makes the bot ignore nick|host.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "adminonly": true,
        "autohelp": false,
        "name": "gignore"
      },
      "triggers": [
        "gignore"
      ]
    },
    "plugins/core_admin_global.py:149 gunignore()": {
      "function": "gunignore",
      "filename": "plugins/core_admin_global.py",
      "lineno": 149,
      "help": "gunignore [channel] <nick|host> -- Makes the bot listen to <nick|host>.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "adminonly": true,
        "autohelp": false,
        "name": "gunignore"
      },
      "triggers": [
        "gunignore"
      ]
    },
    "plugins/core_admin_global.py:167 stop()": {
      "function": "stop",
      "filename": "plugins/core_admin_global.py",
      "lineno": 167,
      "help": "stop [reason] -- Kills the bot with [reason] as its quit message.",
      "args": [
        "inp",
        "nick",
        "conn"
      ],
      "hook": {
        "autohelp": false,
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "stop"
      },
      "triggers": [
        "stop",
        "quit"
      ]
    },
    "plugins/core_admin_global.py:180 restart()": {
      "function": "restart",
      "filename": "plugins/core_admin_global.py",
      "lineno": 180,
      "help": "restart [reason] -- Restarts the bot with [reason] as its quit message.",
      "args": [
        "inp",
        "nick",
        "bot"
      ],
      "hook": {
        "autohelp": false,
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "restart"
      },
      "triggers": [
        "restart"
      ]
    },
    "plugins/core_admin_global.py:194 clearlogs()": {
      "function": "clearlogs",
      "filename": "plugins/core_admin_global.py",
      "lineno": 194,
      "help": "clearlogs -- Clears the bots log(s).",
      "args": [
        "inp",
        "input"
      ],
      "hook": {
        "autohelp": false,
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "clearlogs"
      },
      "triggers": [
        "clearlogs"
      ]
    },
    "plugins/core_admin_global.py:201 join()": {
      "function": "join",
      "filename": "plugins/core_admin_global.py",
      "lineno": 201,
      "help": "join <channel> -- Joins <channel>.",
      "args": [
        "inp",
        "conn",
        "notice",
        "bot"
      ],
      "hook": {
        "autohelp": false,
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "join"
      },
      "triggers": [
        "join"
      ]
    },
    "plugins/core_admin_global.py:226 part()": {
      "function": "part",
      "filename": "plugins/core_admin_global.py",
      "lineno": 226,
      "help": "part [channel] -- Leaves [channel]. If [channel] is blank, leave the current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice",
        "bot"
      ],
      "hook": {
        "autohelp": false,
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "part"
      },
      "triggers": [
        "part"
      ]
    },
    "plugins/core_admin_global.py:249 cycle()": {
      "function": "cycle",
      "filename": "plugins/core_admin_global.py",
      "lineno": 249,
      "help": "cycle [channel] -- Cycles [channel]. If [channel] is blank, cycle the current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "cycle"
      },
      "triggers": [
        "cycle"
      ]
    },
    "plugins/core_admin_global.py:262 nick()": {
      "function": "nick",
      "filename": "plugins/core_admin_global.py",
      "lineno": 262,
      "help": "nick <nick> -- Changes the bots nickname to <nick>.",
      "args": [
        "inp",
        "notice",
        "conn"
      ],
      "hook": {
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "nick"
      },
      "triggers": [
        "nick"
      ]
    },
    "plugins/core_admin_global.py:273 raw()": {
      "function": "raw",
      "filename": "plugins/core_admin_global.py",
      "lineno": 273,
      "help": "raw <command> -- Sends a RAW IRC command.",
      "args": [
        "inp",
        "conn",
        "notice"
      ],
      "hook": {
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "raw"
      },
      "triggers": [
        "raw"
      ]
    },
    "plugins/core_admin_global.py:280 say()": {
      "function": "say",
      "filename": "plugins/core_admin_global.py",
      "lineno": 280,
      "help": "say [channel] <message> -- Say <message> in [channel]. If [channel] is blank, send in current channel.",
      "args": [
        "inp",
        "conn",
        "chan"
      ],
      "hook": {
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "say"
      },
      "triggers": [
        "say"
      ]
    },
    "plugins/core_admin_global.py:293 msg()": {
      "function": "msg",
      "filename": "plugins/core_admin_global.py",
      "lineno": 293,
      "help": "msg <user> <message> -- Sends a Message.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "adminonly": true,
        "name": "msg"
      },
      "triggers": [
        "msg"
      ]
    },
    "plugins/core_admin_global.py:302 me()": {
      "function": "me",
      "filename": "plugins/core_admin_global.py",
      "lineno": 302,
      "help": "me [channel] <action> -- Act out <action> in [channel]. If [channel] is blank, use the current channel.",
      "args": [
        "inp",
        "conn",
        "chan"
      ],
      "hook": {
        "permissions": [
          "botcontrol"
        ],
        "adminonly": true,
        "name": "me"
      },
      "triggers": [
        "me",
        "act"
      ]
    },
    "plugins/core_admin_global.py:322 set()": {
      "function": "set",
      "filename": "plugins/core_admin_global.py",
      "lineno": 322,
      "help": "set <field> <nick> <value> -- Admin override for setting database values. Example: set lastfm infinity spookieboogie",
      "args": [
        "inp",
        "conn",
        "chan",
        "db",
        "notice"
      ],
      "hook": {
        "adminonly": true,
        "name": "set"
      },
      "triggers": [
        "set"
      ]
    },
    "plugins/core_admin_global.py:382 db()": {
      "function": "db",
      "filename": "plugins/core_admin_global.py",
      "lineno": 382,
      "help": "db <update|init> -- Init or update the database.",
      "args": [
        "inp",
        "db",
        "notice",
        "chan"
      ],
      "hook": {
        "autohelp": false,
        "adminonly": true,
        "name": "db"
      },
      "triggers": [
        "db"
      ]
    },
    "plugins/datafiles.py:77 smiley()": {
      "function": "smiley",
      "filename": "plugins/datafiles.py",
      "lineno": 77,
      "help": "smiley -- show a random smiley emoticon",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "smiley"
      },
      "triggers": [
        "smiley"
      ]
    },
    "plugins/datafiles.py:83 potato()": {
      "function": "potato",
      "filename": "plugins/datafiles.py",
      "lineno": 83,
      "help": "potato <user> -- Makes <user> a tasty little potato.",
      "args": [
        "inp",
        "me"
      ],
      "hook": {
        "name": "potato"
      },
      "triggers": [
        "potato"
      ]
    },
    "plugins/datafiles.py:97 eightball()": {
      "function": "eightball",
      "filename": "plugins/datafiles.py",
      "lineno": 97,
      "help": "8ball <question> -- The all knowing magic eight ball, in electronic form. Ask and it shall be answered!",
      "args": [
        "input",
        "me"
      ],
      "hook": {
        "name": "8ball"
      },
      "triggers": [
        "8ball"
      ]
    },
    "plugins/datafiles.py:105 lart()": {
      "function": "lart",
      "filename": "plugins/datafiles.py",
      "lineno": 105,
      "help": "lart <user> -- LARTs <user>.",
      "args": [
        "inp",
        "me",
        "nick",
        "conn",
        "notice",
        "chan"
      ],
      "hook": {
        "name": "lart"
      },
      "triggers": [
        "lart"
      ]
    },
    "plugins/datafiles.py:112 insult()": {
      "function": "insult",
      "filename": "plugins/datafiles.py",
      "lineno": 112,
      "help": "insult <user> -- Makes the bot insult <user>.",
      "args": [
        "inp",
        "me",
        "nick",
        "conn",
        "notice",
        "chan"
      ],
      "hook": {
        "name": "insult"
      },
      "triggers": [
        "insult"
      ]
    },
    "plugins/datafiles.py:119 flirt()": {
      "function": "flirt",
      "filename": "plugins/datafiles.py",
      "lineno": 119,
      "help": "flirt <user> -- Makes the bot flirt <user>.",
      "args": [
        "inp",
        "me",
        "nick",
        "conn",
        "notice",
        "chan"
      ],
      "hook": {
        "name": "flirt"
      },
      "triggers": [
        "flirt"
      ]
    },
    "plugins/datafiles.py:126 yiff()": {
      "function": "yiff",
      "filename": "plugins/datafiles.py",
      "lineno": 126,
      "help": "yiff <user> -- yiffs <user>.",
      "args": [
        "inp",
        "me",
        "nick",
        "conn",
        "notice",
        "chan"
      ],
      "hook": {
        "autohelp": false,
        "name": "yiff"
      },
      "triggers": [
        "yiff"
      ]
    },
    "plugins/datafiles.py:133 lewd()": {
      "function": "lewd",
      "filename": "plugins/datafiles.py",
      "lineno": 133,
      "help": "lewd <user> -- lewd <user>.",
      "args": [
        "inp",
        "me",
        "nick",
        "conn",
        "notice",
        "chan"
      ],
      "hook": {
        "autohelp": false,
        "name": "lewd"
      },
      "triggers": [
        "lewd"
      ]
    },
    "plugins/datafiles.py:143 kill()": {
      "function": "kill",
      "filename": "plugins/datafiles.py",
      "lineno": 143,
      "help": "kill <user> -- Makes the bot kill <user>.",
      "args": [
        "inp",
        "me",
        "nick",
        "conn",
        "notice"
      ],
      "hook": {
        "name": "kill"
      },
      "triggers": [
        "kill"
      ]
    },
    "plugins/datafiles.py:168 slap()": {
      "function": "slap",
      "filename": "plugins/datafiles.py",
      "lineno": 168,
      "help": "slap <user> -- Makes the bot slap <user>.",
      "args": [
        "inp",
        "me",
        "nick",
        "conn",
        "notice"
      ],
      "hook": {
        "name": "slap"
      },
      "triggers": [
        "slap"
      ]
    },
    "plugins/datafiles.py:193 slogan()": {
      "function": "slogan",
      "filename": "plugins/datafiles.py",
      "lineno": 193,
      "help": "slogan <word> -- Makes a slogan for <word>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "slogan"
      },
      "triggers": [
        "slogan"
      ]
    },
    "plugins/datafiles.py:225 add()": {
      "function": "add",
      "filename": "plugins/datafiles.py",
      "lineno": 225,
      "help": "add <type> <data> -- appends <data> to <type>.txt",
      "args": [
        "inp",
        "notice"
      ],
      "hook": {
        "channeladminonly": true,
        "name": "add"
      },
      "triggers": [
        "add"
      ]
    },
    "plugins/datafiles.py:269 troll()": {
      "function": "troll",
      "filename": "plugins/datafiles.py",
      "lineno": 269,
      "help": "troll -- Trolls on demand",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "troll"
      },
      "triggers": [
        "troll",
        "wailord"
      ]
    },
    "plugins/datafiles.py:277 fortune()": {
      "function": "fortune",
      "filename": "plugins/datafiles.py",
      "lineno": 277,
      "help": "fortune -- Fortune cookies on demand.",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "fortune"
      },
      "triggers": [
        "fortune"
      ]
    },
    "plugins/datafiles.py:284 topkek()": {
      "function": "topkek",
      "filename": "plugins/datafiles.py",
      "lineno": 284,
      "help": "topkek -- keks on demand.",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "topkek"
      },
      "triggers": [
        "topkek",
        "kek"
      ]
    },
    "plugins/datafiles.py:292 lolifile()": {
      "function": "lolifile",
      "filename": "plugins/datafiles.py",
      "lineno": 292,
      "help": "loli -- Returns a loli.",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "lolifile"
      },
      "triggers": [
        "lolifile"
      ]
    },
    "plugins/datafiles.py:299 moistcake()": {
      "function": "moistcake",
      "filename": "plugins/datafiles.py",
      "lineno": 299,
      "help": "moistcake -- Moists on demand.",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "moistcake"
      },
      "triggers": [
        "moistcake"
      ]
    },
    "plugins/datafiles.py:306 qt()": {
      "function": "qt",
      "filename": "plugins/datafiles.py",
      "lineno": 306,
      "help": "qt --  return qts.",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "qt"
      },
      "triggers": [
        "qt"
      ]
    },
    "plugins/datafiles.py:313 urmom()": {
      "function": "urmom",
      "filename": "plugins/datafiles.py",
      "lineno": 313,
      "help": "urmom --  return urmom.",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "urmom"
      },
      "triggers": [
        "urmom"
      ]
    },
    "plugins/datafiles.py:320 honry()": {
      "function": "honry",
      "filename": "plugins/datafiles.py",
      "lineno": 320,
      "help": "honry --  return honry.",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "honry"
      },
      "triggers": [
        "honry",
        "old"
      ]
    },
    "plugins/datafiles.py:328 bender()": {
      "function": "bender",
      "filename": "plugins/datafiles.py",
      "lineno": 328,
      "help": "bender -- Bender quotes.",
      "args": [
        "inp",
        "say"
      ],
      "hook": {
        "autohelp": false,
        "name": "bender"
      },
      "triggers": [
        "bender"
      ]
    },
    "plugins/datafiles.py:337 gainz()": {
      "function": "gainz",
      "filename": "plugins/datafiles.py",
      "lineno": 337,
      "help": "gains -- SICK GAINZ BRO",
      "args": [
        "inp",
        "say",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "gainz"
      },
      "triggers": [
        "gainz",
        "gains"
      ]
    },
    "plugins/furry.py:43 furry()": {
      "function": "furry",
      "filename": "plugins/furry.py",
      "lineno": 43,
      "help": "furry [query] -- show latest e621.net posts, or search with the given query",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "furry"
      },
      "triggers": [
        "furry",
        "e621"
      ]
    },
    "plugins/spotify.py:30 spotify()": {
      "function": "spotify",
      "filename": "plugins/spotify.py",
      "lineno": 30,
      "help": "spotify <song> -- Search Spotify for <song>",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "spotify"
      },
      "triggers": [
        "spotify",
        "song",
        "sp"
      ]
    },
    "plugins/spotify.py:73 spalbum()": {
      "function": "spalbum",
      "filename": "plugins/spotify.py",
      "lineno": 73,
      "help": "spalbum <album> -- Search Spotify for <album>",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "spalbum"
      },
      "triggers": [
        "spalbum",
        "album"
      ]
    },
    "plugins/spotify.py:115 spartist()": {
      "function": "spartist",
      "filename": "plugins/spotify.py",
      "lineno": 115,
      "help": "spartist <artist> -- Search Spotify for <artist>",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "spartist"
      },
      "triggers": [
        "spartist",
        "artist"
      ]
    },
    "plugins/tiktok.py:60 tiktok()": {
      "function": "tiktok",
      "filename": "plugins/tiktok.py",
      "lineno": 60,
      "help": "tiktok <id> -- return info on some tiktok video by unique id",
      "args": [
        "id"
      ],
      "hook": {
        "name": "tiktok"
      },
      "triggers": [
        "tiktok"
      ]
    },
    "plugins/google.py:10 google()": {
      "function": "google",
      "filename": "plugins/google.py",
      "lineno": 10,
      "help": "google <query> -- Returns first google search result for <query>.",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "google"
      },
      "triggers": [
        "google",
        "g",
        "search"
      ]
    },
    "plugins/google.py:33 image()": {
      "function": "image",
      "filename": "plugins/google.py",
      "lineno": 33,
      "help": "image <query> -- Returns the first Google Image result for <query>.",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "gi"
      },
      "triggers": [
        "gi"
      ]
    },
    "plugins/translate.py:143 translate()": {
      "function": "translate",
      "filename": "plugins/translate.py",
      "lineno": 143,
      "help": "translate [from language] [to language] <text> -- Translate text with google translate, auto-detect by default",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "translate"
      },
      "triggers": [
        "translate"
      ]
    },
    "plugins/help.py:7 commands()": {
      "function": "commands",
      "filename": "plugins/help.py",
      "lineno": 7,
      "help": "commands [command] -- Gives a list of available commands, or help for [command]",
      "args": [
        "inp",
        "say",
        "notice",
        "input",
        "conn",
        "bot",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "name": "commands"
      },
      "triggers": [
        "commands"
      ]
    },
    "plugins/help.py:57 help()": {
      "function": "help",
      "filename": "plugins/help.py",
      "lineno": 57,
      "help": "help [command] -- show help for [command]",
      "args": [
        "inp",
        "say",
        "notice",
        "input",
        "conn",
        "bot",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "name": "help"
      },
      "triggers": [
        "help",
        "command"
      ]
    },
    "plugins/choose.py:5 choose()": {
      "function": "choose",
      "filename": "plugins/choose.py",
      "lineno": 5,
      "help": "choose <choice1>, [choice2], [choice3], ... --  Randomly picks one of the given choices.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "choose"
      },
      "triggers": [
        "choose",
        "decide"
      ]
    },
    "plugins/major_league_baseball.py:36 mlb()": {
      "function": "mlb",
      "filename": "plugins/major_league_baseball.py",
      "lineno": 36,
      "help": null,
      "args": [
        "inp",
        "say"
      ],
      "hook": {
        "name": "mlb",
        "autohelp": false
      },
      "triggers": [
        "mlb"
      ]
    },
    "plugins/steam.py:34 steamsearch()": {
      "function": "steamsearch",
      "filename": "plugins/steam.py",
      "lineno": 34,
      "help": "steamsearch <search> -- Search for specified game/trailer/DLC",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "steamsearch"
      },
      "triggers": [
        "steamsearch"
      ]
    },
    "plugins/steam.py:71 steamcalc()": {
      "function": "steamcalc",
      "filename": "plugins/steam.py",
      "lineno": 71,
      "help": "steamcalc <username> -- Gets value of steam account and total hours played",
      "args": [
        "inp",
        "reply"
      ],
      "hook": {
        "name": "steamcalc"
      },
      "triggers": [
        "steamcalc",
        "sc"
      ]
    },
    "plugins/core_user.py:5 battlestation()": {
      "function": "battlestation",
      "filename": "plugins/core_user.py",
      "lineno": 5,
      "help": "battlestation <url | @ nick> -- set your battlestation or see <nick>'s",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "battlestation"
      },
      "triggers": [
        "battlestation",
        "keyboard",
        "bullshit"
      ]
    },
    "plugins/core_user.py:35 desktop()": {
      "function": "desktop",
      "filename": "plugins/core_user.py",
      "lineno": 35,
      "help": "desktop <url | @ nick> -- set your desktop or see <nick>'s",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "desktop"
      },
      "triggers": [
        "desktop"
      ]
    },
    "plugins/core_user.py:63 greeting()": {
      "function": "greeting",
      "filename": "plugins/core_user.py",
      "lineno": 63,
      "help": "greet <message | @ nick> -- set your intro message or see <nick>'s",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "greeting"
      },
      "triggers": [
        "greeting",
        "intro"
      ]
    },
    "plugins/core_user.py:93 waifu()": {
      "function": "waifu",
      "filename": "plugins/core_user.py",
      "lineno": 93,
      "help": "waifu <waifu | @ nick> -- Shows a users Waifu or Husbando.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "waifu"
      },
      "triggers": [
        "waifu"
      ]
    },
    "plugins/core_user.py:116 husbando()": {
      "function": "husbando",
      "filename": "plugins/core_user.py",
      "lineno": 116,
      "help": "husbando <husbando | @ nick> -- Shows a users husbando or Husbando.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "husbando"
      },
      "triggers": [
        "husbando"
      ]
    },
    "plugins/core_user.py:139 imouto()": {
      "function": "imouto",
      "filename": "plugins/core_user.py",
      "lineno": 139,
      "help": "imouto <imouto | @ nick> -- Shows a users imouto or Husbando.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "imouto"
      },
      "triggers": [
        "imouto"
      ]
    },
    "plugins/core_user.py:162 daughteru()": {
      "function": "daughteru",
      "filename": "plugins/core_user.py",
      "lineno": 162,
      "help": "daughteru <daughteru | @ nick> -- Shows a users daughteru.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "daughteru"
      },
      "triggers": [
        "daughteru"
      ]
    },
    "plugins/core_user.py:185 mom()": {
      "function": "mom",
      "filename": "plugins/core_user.py",
      "lineno": 185,
      "help": "mom <mom | @ nick> -- Shows a users mom.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "mom"
      },
      "triggers": [
        "mom"
      ]
    },
    "plugins/core_user.py:208 dad()": {
      "function": "dad",
      "filename": "plugins/core_user.py",
      "lineno": 208,
      "help": "dad <dad | @ nick> -- Shows a users dad.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "dad"
      },
      "triggers": [
        "dad"
      ]
    },
    "plugins/core_user.py:232 birthday()": {
      "function": "birthday",
      "filename": "plugins/core_user.py",
      "lineno": 232,
      "help": "birthday <date | @ person> -- Shows a users Birthday.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "birthday"
      },
      "triggers": [
        "birthday"
      ]
    },
    "plugins/core_user.py:256 horoscope()": {
      "function": "horoscope",
      "filename": "plugins/core_user.py",
      "lineno": 256,
      "help": "horoscope <sign> [save] -- Get your horoscope.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "horoscope"
      },
      "triggers": [
        "horoscope"
      ]
    },
    "plugins/core_user.py:304 homescreen()": {
      "function": "homescreen",
      "filename": "plugins/core_user.py",
      "lineno": 304,
      "help": "homescreen <url | @ nick> -- Shows a users homescreen.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "homescreen"
      },
      "triggers": [
        "homescreen"
      ]
    },
    "plugins/core_user.py:332 snapchat()": {
      "function": "snapchat",
      "filename": "plugins/core_user.py",
      "lineno": 332,
      "help": "snapchat <snapchatname | @ nick> -- Shows a users snapchat name.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "snapchat"
      },
      "triggers": [
        "snapchat"
      ]
    },
    "plugins/core_user.py:355 socialmedia()": {
      "function": "socialmedia",
      "filename": "plugins/core_user.py",
      "lineno": 355,
      "help": "socialmedia <socialmedianames | @ nick> -- Shows a users social medias names.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "socialmedia"
      },
      "triggers": [
        "socialmedia",
        "soc"
      ]
    },
    "plugins/core_user.py:379 myanime()": {
      "function": "myanime",
      "filename": "plugins/core_user.py",
      "lineno": 379,
      "help": "myanime <mal name | @ nick> -- Shows a users myanimelist profile.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "myanime"
      },
      "triggers": [
        "myanime"
      ]
    },
    "plugins/core_user.py:402 mymanga()": {
      "function": "mymanga",
      "filename": "plugins/core_user.py",
      "lineno": 402,
      "help": "mymanga <mal name | @ nick> -- Shows a users myanimelist profile.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "mymanga"
      },
      "triggers": [
        "mymanga"
      ]
    },
    "plugins/core_user.py:425 selfie()": {
      "function": "selfie",
      "filename": "plugins/core_user.py",
      "lineno": 425,
      "help": "selfie <url | @ nick> -- Shows a users selfie.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "selfie"
      },
      "triggers": [
        "selfie"
      ]
    },
    "plugins/core_user.py:453 fit()": {
      "function": "fit",
      "filename": "plugins/core_user.py",
      "lineno": 453,
      "help": "fit <url | @ nick> -- Shows a users outfit.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "fit"
      },
      "triggers": [
        "fit"
      ]
    },
    "plugins/core_user.py:481 handwriting()": {
      "function": "handwriting",
      "filename": "plugins/core_user.py",
      "lineno": 481,
      "help": "handwriting <url | @ nick> -- Shows a users handwriting.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "handwriting"
      },
      "triggers": [
        "handwriting",
        "hw"
      ]
    },
    "plugins/core_user.py:510 steam()": {
      "function": "steam",
      "filename": "plugins/core_user.py",
      "lineno": 510,
      "help": "steam <steam username | @ nick> -- Shows a users steam information.",
      "args": [
        "inp",
        "nick",
        "db",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "steam"
      },
      "triggers": [
        "steam"
      ]
    },
    "plugins/stock.py:15 stock()": {
      "function": "stock",
      "filename": "plugins/stock.py",
      "lineno": 15,
      "help": "stock <symbol> -- gets stock information",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "stock"
      },
      "triggers": [
        "stock"
      ]
    },
    "plugins/duckduckgo.py:152 ddg()": {
      "function": "ddg",
      "filename": "plugins/duckduckgo.py",
      "lineno": 152,
      "help": "ddg <query> -- search the webs with duckduckgo",
      "args": [
        "inp",
        "say"
      ],
      "hook": {
        "name": "ddg"
      },
      "triggers": [
        "ddg"
      ]
    },
    "plugins/distro.py:80 distro()": {
      "function": "distro",
      "filename": "plugins/distro.py",
      "lineno": 80,
      "help": "distro -- get most popular linux distros according to distrowatch.com",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "distro"
      },
      "triggers": [
        "distro"
      ]
    },
    "plugins/namegen.py:49 namegen()": {
      "function": "namegen",
      "filename": "plugins/namegen.py",
      "lineno": 49,
      "help": "namegen [generator] -- Generates some names using the chosen generator. 'namegen list' will display a list of all generators.",
      "args": [
        "inp",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "namegen"
      },
      "triggers": [
        "namegen"
      ]
    },
    "plugins/wolframalpha.py:215 wolframalpha()": {
      "function": "wolframalpha",
      "filename": "plugins/wolframalpha.py",
      "lineno": 215,
      "help": "wa <query> -- Computes <query> using Wolfram Alpha.",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "wolframalpha"
      },
      "triggers": [
        "wolframalpha",
        "wa",
        "calc",
        "convert"
      ]
    },
    "plugins/system.py:22 system()": {
      "function": "system",
      "filename": "plugins/system.py",
      "lineno": 22,
      "help": "system -- Retrieves information about the host system.",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "adminonly": true,
        "name": "system"
      },
      "triggers": [
        "system"
      ]
    },
    "plugins/system.py:40 memory()": {
      "function": "memory",
      "filename": "plugins/system.py",
      "lineno": 40,
      "help": "memory -- Displays the bot's current memory usage.",
      "args": [
        "inp",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "adminonly": true,
        "name": "memory"
      },
      "triggers": [
        "memory"
      ]
    },
    "plugins/system.py:76 uptime()": {
      "function": "uptime",
      "filename": "plugins/system.py",
      "lineno": 76,
      "help": "uptime -- Shows the bot's uptime.",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "autohelp": false,
        "name": "uptime"
      },
      "triggers": [
        "uptime"
      ]
    },
    "plugins/system.py:88 pid()": {
      "function": "pid",
      "filename": "plugins/system.py",
      "lineno": 88,
      "help": "pid -- Prints the bot's PID.",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "adminonly": true,
        "name": "pid"
      },
      "triggers": [
        "pid"
      ]
    },
    "plugins/system.py:94 bots()": {
      "function": "bots",
      "filename": "plugins/system.py",
      "lineno": 94,
      "help": "bots -- standard reply to IRC Bot Identification Protocol Standard",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "bots"
      },
      "triggers": [
        "bots"
      ]
    },
    "plugins/system.py:100 source()": {
      "function": "source",
      "filename": "plugins/system.py",
      "lineno": 100,
      "help": "source -- show a link to taigabot's source code",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "source"
      },
      "triggers": [
        "source"
      ]
    },
    "plugins/system.py:106 commit()": {
      "function": "commit",
      "filename": "plugins/system.py",
      "lineno": 106,
      "help": "commit -- show taigabot's current HEAD commit",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "commit"
      },
      "triggers": [
        "commit"
      ]
    },
    "plugins/booru.py:102 yandere()": {
      "function": "yandere",
      "filename": "plugins/booru.py",
      "lineno": 102,
      "help": "yandere [search] -- List latest yande.re posts or search for a tag",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "yandere"
      },
      "triggers": [
        "yandere"
      ]
    },
    "plugins/booru.py:112 danbooru()": {
      "function": "danbooru",
      "filename": "plugins/booru.py",
      "lineno": 112,
      "help": "danbooru [search] -- List latest danbooru.donmai.us posts or search for a tag",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "danbooru"
      },
      "triggers": [
        "danbooru"
      ]
    },
    "plugins/religion.py:14 bible()": {
      "function": "bible",
      "filename": "plugins/religion.py",
      "lineno": 14,
      "help": "bible <passage> -- gets <passage> from the Bible (ESV)",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "bible"
      },
      "triggers": [
        "bible",
        "god"
      ]
    },
    "plugins/religion.py:47 koran()": {
      "function": "koran",
      "filename": "plugins/religion.py",
      "lineno": 47,
      "help": "koran <chapter.verse> -- gets <chapter.verse> from the Koran. it can also search any text.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "koran"
      },
      "triggers": [
        "koran",
        "allah"
      ]
    },
    "plugins/masshighlight.py:58 users()": {
      "function": "users",
      "filename": "plugins/masshighlight.py",
      "lineno": 58,
      "help": null,
      "args": [
        "inp",
        "nick",
        "chan",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "adminonly": true,
        "name": "users"
      },
      "triggers": [
        "users"
      ]
    },
    "plugins/masshighlight.py:64 getusers()": {
      "function": "getusers",
      "filename": "plugins/masshighlight.py",
      "lineno": 64,
      "help": null,
      "args": [
        "inp",
        "conn",
        "chan"
      ],
      "hook": {
        "autohelp": false,
        "adminonly": true,
        "name": "getusers"
      },
      "triggers": [
        "getusers"
      ]
    },
    "plugins/youtube.py:94 randomtube()": {
      "function": "randomtube",
      "filename": "plugins/youtube.py",
      "lineno": 94,
      "help": "randomtube -- Returns random youtube link from old logs.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "ytr",
        "autohelp": false
      },
      "triggers": [
        "ytr"
      ]
    },
    "plugins/youtube.py:115 youtube()": {
      "function": "youtube",
      "filename": "plugins/youtube.py",
      "lineno": 115,
      "help": "youtube <query> -- Returns the first YouTube search result for <query>.",
      "args": [
        "inp",
        "bot",
        "input"
      ],
      "hook": {
        "name": "youtube"
      },
      "triggers": [
        "youtube",
        "ht",
        "hooktube",
        "yt"
      ]
    },
    "plugins/youtube.py:142 youtime()": {
      "function": "youtime",
      "filename": "plugins/youtube.py",
      "lineno": 142,
      "help": "youtime <query> -- Gets the total run time of the first YouTube search result for <query>.",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "youtime"
      },
      "triggers": [
        "youtime",
        "ytime"
      ]
    },
    "plugins/dictionary.py:11 define()": {
      "function": "define",
      "filename": "plugins/dictionary.py",
      "lineno": 11,
      "help": "define <word> -- Fetches definition of <word>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "define"
      },
      "triggers": [
        "define",
        "dictionary"
      ]
    },
    "plugins/dictionary.py:52 etymology()": {
      "function": "etymology",
      "filename": "plugins/dictionary.py",
      "lineno": 52,
      "help": "etymology <word> -- Retrieves the etymology of <word>.",
      "args": [
        "inp"
      ],
      "hook": {
        "name": "etymology"
      },
      "triggers": [
        "etymology"
      ]
    },
    "plugins/lyrics.py:8 lyrics()": {
      "function": "lyrics",
      "filename": "plugins/lyrics.py",
      "lineno": 8,
      "help": "lyrics <search> -- Search genius.com for song lyrics",
      "args": [
        "inp",
        "bot"
      ],
      "hook": {
        "name": "lyrics"
      },
      "triggers": [
        "lyrics"
      ]
    },
    "plugins/core_admin_channel.py:15 mask()": {
      "function": "mask",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 15,
      "help": null,
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "adminonly": true,
        "name": "mask"
      },
      "triggers": [
        "mask"
      ]
    },
    "plugins/core_admin_channel.py:47 match()": {
      "function": "match",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 47,
      "help": null,
      "args": [
        "inp",
        "chan",
        "bot",
        "input",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "channeladminonly": true,
        "name": "match"
      },
      "triggers": [
        "match"
      ]
    },
    "plugins/core_admin_channel.py:70 admins()": {
      "function": "admins",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 70,
      "help": "admins [channel] -- Lists admins on channel.",
      "args": [
        "inp",
        "notice",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "admins"
      },
      "triggers": [
        "admins"
      ]
    },
    "plugins/core_admin_channel.py:83 admin()": {
      "function": "admin",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 83,
      "help": "admin [channel] <add|del> <nick|host> -- Makes the user an admin.",
      "args": [
        "inp",
        "notice",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "admin"
      },
      "triggers": [
        "admin"
      ]
    },
    "plugins/core_admin_channel.py:133 autoops()": {
      "function": "autoops",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 133,
      "help": "aops [channel] -- Lists autoops on channel.",
      "args": [
        "inp",
        "notice",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "autoops"
      },
      "triggers": [
        "autoops"
      ]
    },
    "plugins/core_admin_channel.py:148 autoop()": {
      "function": "autoop",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 148,
      "help": "aop [channel] <enable|disable> OR <add|del> <nick|host> -- Add/Del Autoops.",
      "args": [
        "inp",
        "notice",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "autoop"
      },
      "triggers": [
        "autoop"
      ]
    },
    "plugins/core_admin_channel.py:232 ignored()": {
      "function": "ignored",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 232,
      "help": "ignored [channel] -- Lists ignored channels/nicks/hosts.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "ignored"
      },
      "triggers": [
        "ignored"
      ]
    },
    "plugins/core_admin_channel.py:245 ignore()": {
      "function": "ignore",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 245,
      "help": "ignore [channel] <nick|host> -- Makes the bot ignore <nick|host>.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "ignore"
      },
      "triggers": [
        "ignore"
      ]
    },
    "plugins/core_admin_channel.py:268 unignore()": {
      "function": "unignore",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 268,
      "help": "unignore [channel] <nick|host> -- Makes the bot listen to <nick|host>.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "unignore"
      },
      "triggers": [
        "unignore"
      ]
    },
    "plugins/core_admin_channel.py:288 disabled()": {
      "function": "disabled",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 288,
      "help": "disabled [#channel] -- Lists disabled commands/.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "disabled"
      },
      "triggers": [
        "disabled"
      ]
    },
    "plugins/core_admin_channel.py:302 disable()": {
      "function": "disable",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 302,
      "help": "disable [#channel] <commands> -- Disables commands for a channel. Accepts multiple multiple commands at once.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "disable"
      },
      "triggers": [
        "disable"
      ]
    },
    "plugins/core_admin_channel.py:323 enable()": {
      "function": "enable",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 323,
      "help": "enable [#channel] <commands|all> -- Enables commands for a channel. Accepts multiple commands at once",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "enable"
      },
      "triggers": [
        "enable"
      ]
    },
    "plugins/core_admin_channel.py:358 disablehash()": {
      "function": "disablehash",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 358,
      "help": "disablehash [#channel] <hashtah> -- Disables hashtah for a channel. Accepts multiple at once. Don't use #.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "disablehash"
      },
      "triggers": [
        "disablehash"
      ]
    },
    "plugins/core_admin_channel.py:380 disabledhashes()": {
      "function": "disabledhashes",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 380,
      "help": "disabledhashes [#channel] -- Lists disabled hashtags.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "disabledhashes"
      },
      "triggers": [
        "disabledhashes"
      ]
    },
    "plugins/core_admin_channel.py:393 enablehash()": {
      "function": "enablehash",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 393,
      "help": "enablehash [#channel] <hashtag|all> -- Enables hashtags for a channel. Accepts multiple at once. Don't use #.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "enablehash"
      },
      "triggers": [
        "enablehash"
      ]
    },
    "plugins/core_admin_channel.py:421 showfloods()": {
      "function": "showfloods",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 421,
      "help": "showfloods [channel] -- Shows flood settings.",
      "args": [
        "inp",
        "chan",
        "notice",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "name": "showfloods"
      },
      "triggers": [
        "showfloods"
      ]
    },
    "plugins/core_admin_channel.py:445 flood()": {
      "function": "flood",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 445,
      "help": "flood [channel] <number> <duration> | disable -- Enables flood protection for a channel.\n    ex: .flood 3 30 -- Allows 3 messages in 30 seconds, set disable to disable",
      "args": [
        "inp",
        "chan",
        "notice",
        "db"
      ],
      "hook": {
        "channeladminonly": true,
        "autohelp": false,
        "name": "flood"
      },
      "triggers": [
        "flood"
      ]
    },
    "plugins/core_admin_channel.py:473 cmdflood()": {
      "function": "cmdflood",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 473,
      "help": "cmdflood [channel] <number> <duration> | disable -- Enables commandflood protection for a channel.\n    ex: .cmdflood 3 30 -- Allows 3 commands in 30 seconds, set disable to disable",
      "args": [
        "inp",
        "chan",
        "notice",
        "db"
      ],
      "hook": {
        "channeladminonly": true,
        "autohelp": false,
        "name": "cmdflood"
      },
      "triggers": [
        "cmdflood"
      ]
    },
    "plugins/core_admin_channel.py:505 badwords()": {
      "function": "badwords",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 505,
      "help": "disabled [#channel] -- Lists disabled commands/.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "badwords"
      },
      "triggers": [
        "badwords"
      ]
    },
    "plugins/core_admin_channel.py:563 trim()": {
      "function": "trim",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 563,
      "help": "trim [channel] <length|disable> -- Sets trim length for parsers.\n    ex: .trim 150 -- Returns the first 150 characters of a parsed url",
      "args": [
        "inp",
        "chan",
        "notice",
        "db"
      ],
      "hook": {
        "channeladminonly": true,
        "autohelp": false,
        "name": "trim"
      },
      "triggers": [
        "trim"
      ]
    },
    "plugins/core_admin_channel.py:600 topic()": {
      "function": "topic",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 600,
      "help": "topic [channel] <topic> -- Change the topic of a channel.",
      "args": [
        "inp",
        "conn",
        "chan"
      ],
      "hook": {
        "permissions": [
          "op_topic",
          "op"
        ],
        "channeladminonly": true,
        "name": "topic"
      },
      "triggers": [
        "topic"
      ]
    },
    "plugins/core_admin_channel.py:608 mute()": {
      "function": "mute",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 608,
      "help": "mute [channel] -- Makes the bot mute a channel..\n    If [channel] is blank the bot will mute\n    the channel the command was used in.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "permissions": [
          "op_mute",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "mute"
      },
      "triggers": [
        "mute"
      ]
    },
    "plugins/core_admin_channel.py:617 unmute()": {
      "function": "unmute",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 617,
      "help": "mute [channel] -- Makes the bot mute a channel. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "permissions": [
          "op_mute",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "unmute"
      },
      "triggers": [
        "unmute"
      ]
    },
    "plugins/core_admin_channel.py:624 shutup()": {
      "function": "shutup",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 624,
      "help": "shutup [channel] <user> -- Shuts the user up.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "adminonly": true,
        "name": "shutup"
      },
      "triggers": [
        "shutup",
        "silence",
        "stfu"
      ]
    },
    "plugins/core_admin_channel.py:642 speak()": {
      "function": "speak",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 642,
      "help": "speak [channel] <user> -- unShuts the user up.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "adminonly": true,
        "name": "speak"
      },
      "triggers": [
        "speak"
      ]
    },
    "plugins/core_admin_channel.py:658 lock()": {
      "function": "lock",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 658,
      "help": "lock [channel] -- Makes the bot lock a channel. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "lock"
      },
      "triggers": [
        "lock"
      ]
    },
    "plugins/core_admin_channel.py:665 unlock()": {
      "function": "unlock",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 665,
      "help": "unlock [channel] -- Makes the bot unlock a channel. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "unlock"
      },
      "triggers": [
        "unlock"
      ]
    },
    "plugins/core_admin_channel.py:696 bans()": {
      "function": "bans",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 696,
      "help": "bans -- Lists bans on channel.",
      "args": [
        "inp",
        "notice",
        "bot",
        "chan",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_lock",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "bans"
      },
      "triggers": [
        "bans"
      ]
    },
    "plugins/core_admin_channel.py:706 ban()": {
      "function": "ban",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 706,
      "help": "ban [channel] <user> [reason] [timer] -- Makes the bot ban <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice",
        "db",
        "nick",
        "bot"
      ],
      "hook": {
        "permissions": [
          "op_ban",
          "op"
        ],
        "channeladminonly": true,
        "name": "ban"
      },
      "triggers": [
        "ban",
        "kb"
      ]
    },
    "plugins/core_admin_channel.py:747 unban()": {
      "function": "unban",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 747,
      "help": "unban [channel] <user> -- Makes the bot unban <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice",
        "db"
      ],
      "hook": {
        "permissions": [
          "op_ban",
          "op"
        ],
        "channeladminonly": true,
        "name": "unban"
      },
      "triggers": [
        "unban",
        "ub"
      ]
    },
    "plugins/core_admin_channel.py:770 kick()": {
      "function": "kick",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 770,
      "help": "kick [channel] <user> [reason] -- Makes the bot kick <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "chan",
        "conn",
        "notice",
        "nick",
        "bot"
      ],
      "hook": {
        "permissions": [
          "op_kick",
          "op"
        ],
        "channeladminonly": true,
        "name": "kick"
      },
      "triggers": [
        "kick",
        "kal",
        "k"
      ]
    },
    "plugins/core_admin_channel.py:790 op()": {
      "function": "op",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 790,
      "help": "op [channel] <user> -- Makes the bot op <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice",
        "nick"
      ],
      "hook": {
        "permissions": [
          "op_op",
          "op"
        ],
        "channeladminonly": true,
        "name": "op"
      },
      "triggers": [
        "op",
        "up"
      ]
    },
    "plugins/core_admin_channel.py:800 deop()": {
      "function": "deop",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 800,
      "help": "deop [channel] <user> -- Makes the bot deop <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice",
        "nick"
      ],
      "hook": {
        "permissions": [
          "op_op",
          "op"
        ],
        "channeladminonly": true,
        "name": "deop"
      },
      "triggers": [
        "deop",
        "down"
      ]
    },
    "plugins/core_admin_channel.py:813 hop()": {
      "function": "hop",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 813,
      "help": "op [channel] <user> -- Makes the bot op <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "chan",
        "conn",
        "notice",
        "nick"
      ],
      "hook": {
        "permissions": [
          "op_op",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "hop"
      },
      "triggers": [
        "hop"
      ]
    },
    "plugins/core_admin_channel.py:821 dehop()": {
      "function": "dehop",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 821,
      "help": "deop [channel] <user> -- Makes the bot deop <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "chan",
        "conn",
        "notice",
        "nick"
      ],
      "hook": {
        "permissions": [
          "op_op",
          "op"
        ],
        "channeladminonly": true,
        "autohelp": false,
        "name": "dehop"
      },
      "triggers": [
        "dehop"
      ]
    },
    "plugins/core_admin_channel.py:829 voice()": {
      "function": "voice",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 829,
      "help": "voice [channel] <user> -- Makes the bot voice <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "permissions": [
          "op_voice",
          "op"
        ],
        "channeladminonly": true,
        "name": "voice"
      },
      "triggers": [
        "voice"
      ]
    },
    "plugins/core_admin_channel.py:836 devoice()": {
      "function": "devoice",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 836,
      "help": "devoice [channel] <user> -- Makes the bot devoice <user> in [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "permissions": [
          "op_voice",
          "op"
        ],
        "channeladminonly": true,
        "name": "devoice"
      },
      "triggers": [
        "devoice"
      ]
    },
    "plugins/core_admin_channel.py:844 invite()": {
      "function": "invite",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 844,
      "help": "invite [channel] <user> -- Makes the bot invite <user> to [channel]. If [channel] is blank, use current channel.",
      "args": [
        "inp",
        "conn",
        "chan",
        "notice"
      ],
      "hook": {
        "name": "invite"
      },
      "triggers": [
        "invite"
      ]
    },
    "plugins/core_admin_channel.py:890 remove()": {
      "function": "remove",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 890,
      "help": "remove [channel] <user> [message] -- Force a user to part from a channel.",
      "args": [
        "inp",
        "chan",
        "conn"
      ],
      "hook": {
        "permissions": [
          "op_rem",
          "op"
        ],
        "channeladminonly": true,
        "name": "remove"
      },
      "triggers": [
        "remove"
      ]
    },
    "plugins/core_admin_channel.py:899 testdamnit()": {
      "function": "testdamnit",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 899,
      "help": null,
      "args": [
        "inp",
        "bot",
        "conn"
      ],
      "hook": {
        "adminonly": true,
        "name": "testdamnit"
      },
      "triggers": [
        "testdamnit"
      ]
    },
    "plugins/wordoftheday.py:8 wordoftheday()": {
      "function": "wordoftheday",
      "filename": "plugins/wordoftheday.py",
      "lineno": 8,
      "help": "wordoftheday -- finds an interesting word for today in merriam-webster.com",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "wordoftheday"
      },
      "triggers": [
        "wordoftheday"
      ]
    },
    "plugins/stupid.py:164 guts()": {
      "function": "guts",
      "filename": "plugins/stupid.py",
      "lineno": 164,
      "help": "guts -- fuck jumi.",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "guts"
      },
      "triggers": [
        "guts"
      ]
    },
    "plugins/stupid.py:170 plez()": {
      "function": "plez",
      "filename": "plugins/stupid.py",
      "lineno": 170,
      "help": "plez -- disable plez",
      "args": [
        "inp",
        "me"
      ],
      "hook": {
        "name": "plez"
      },
      "triggers": [
        "plez"
      ]
    },
    "plugins/stupid.py:178 bet()": {
      "function": "bet",
      "filename": "plugins/stupid.py",
      "lineno": 178,
      "help": "bet <ammount> -- bets <ammount>",
      "args": [
        "inp",
        "nick",
        "db",
        "chan",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "bet"
      },
      "triggers": [
        "bet"
      ]
    },
    "plugins/stupid.py:230 honk()": {
      "function": "honk",
      "filename": "plugins/stupid.py",
      "lineno": 230,
      "help": "honk <nick> -- Honks at someone.",
      "args": [
        "inp",
        "nick",
        "conn",
        "chan",
        "db",
        "paraml",
        "input"
      ],
      "hook": {
        "autohelp": false,
        "name": "honk"
      },
      "triggers": [
        "honk",
        "lick",
        "pet",
        "diddle",
        "spank",
        "rape",
        "buy",
        "sex",
        "shill",
        "sell"
      ]
    },
    "plugins/stupid.py:348 donate()": {
      "function": "donate",
      "filename": "plugins/stupid.py",
      "lineno": 348,
      "help": "donate <user> <money> -- Gives <money> to <user>.",
      "args": [
        "inp",
        "db",
        "nick",
        "chan",
        "conn",
        "notice"
      ],
      "hook": {
        "name": "donate"
      },
      "triggers": [
        "donate",
        "give"
      ]
    },
    "plugins/stupid.py:398 mug()": {
      "function": "mug",
      "filename": "plugins/stupid.py",
      "lineno": 398,
      "help": "mug <user> -- Takes money from <user>..",
      "args": [
        "inp",
        "db",
        "nick",
        "me"
      ],
      "hook": {
        "name": "mug"
      },
      "triggers": [
        "mug",
        "rob",
        "steal"
      ]
    },
    "plugins/stupid.py:437 owed()": {
      "function": "owed",
      "filename": "plugins/stupid.py",
      "lineno": 437,
      "help": "owe -- shows your total fines",
      "args": [
        "inp",
        "nick",
        "db"
      ],
      "hook": {
        "autohelp": false,
        "name": "owed"
      },
      "triggers": [
        "owed"
      ]
    },
    "plugins/stupid.py:458 pay()": {
      "function": "pay",
      "filename": "plugins/stupid.py",
      "lineno": 458,
      "help": "pay -- pay your fines",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "pay"
      },
      "triggers": [
        "pay"
      ]
    },
    "plugins/stupid.py:479 vendingmachine()": {
      "function": "vendingmachine",
      "filename": "plugins/stupid.py",
      "lineno": 479,
      "help": "vendingmachine [nick] -- get a surprise from the vending machine",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "vendingmachine"
      },
      "triggers": [
        "vendingmachine"
      ]
    },
    "plugins/stupid.py:491 hug()": {
      "function": "hug",
      "filename": "plugins/stupid.py",
      "lineno": 491,
      "help": "hug <nick> -- hugs someone",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "hug"
      },
      "triggers": [
        "hug",
        "love",
        "daki"
      ]
    },
    "plugins/stupid.py:500 dab()": {
      "function": "dab",
      "filename": "plugins/stupid.py",
      "lineno": 500,
      "help": "dab <nick> -- dab on dem haters",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "dab"
      },
      "triggers": [
        "dab"
      ]
    },
    "plugins/stupid.py:507 poke()": {
      "function": "poke",
      "filename": "plugins/stupid.py",
      "lineno": 507,
      "help": "poke <nick> -- pokes someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "poke"
      },
      "triggers": [
        "poke"
      ]
    },
    "plugins/stupid.py:514 nigger()": {
      "function": "nigger",
      "filename": "plugins/stupid.py",
      "lineno": 514,
      "help": "nigger <nick> -- niggers someone",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "nigger"
      },
      "triggers": [
        "nigger"
      ]
    },
    "plugins/stupid.py:521 kiss()": {
      "function": "kiss",
      "filename": "plugins/stupid.py",
      "lineno": 521,
      "help": "hug <nick> -- hugs someone",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "kiss"
      },
      "triggers": [
        "kiss"
      ]
    },
    "plugins/stupid.py:528 intensify()": {
      "function": "intensify",
      "filename": "plugins/stupid.py",
      "lineno": 528,
      "help": "intensify <word> -- [EXCITEMENT INTENSIFIES]",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "intensify"
      },
      "triggers": [
        "intensify"
      ]
    },
    "plugins/stupid.py:539 increase()": {
      "function": "increase",
      "filename": "plugins/stupid.py",
      "lineno": 539,
      "help": "increase -- make the channel significantly better",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "increase"
      },
      "triggers": [
        "increase"
      ]
    },
    "plugins/stupid.py:545 decrease()": {
      "function": "decrease",
      "filename": "plugins/stupid.py",
      "lineno": 545,
      "help": "decrease -- make the channel significantly worse",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "decrease"
      },
      "triggers": [
        "decrease"
      ]
    },
    "plugins/stupid.py:551 shekels()": {
      "function": "shekels",
      "filename": "plugins/stupid.py",
      "lineno": 551,
      "help": "shekels -- some moneys...",
      "args": [
        "inp",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "shekels"
      },
      "triggers": [
        "shekels"
      ]
    },
    "plugins/stupid.py:557 hump()": {
      "function": "hump",
      "filename": "plugins/stupid.py",
      "lineno": 557,
      "help": "hump [nick] -- hump someone",
      "args": [
        "inp",
        "me",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "hump"
      },
      "triggers": [
        "hump"
      ]
    },
    "plugins/stupid.py:564 marry()": {
      "function": "marry",
      "filename": "plugins/stupid.py",
      "lineno": 564,
      "help": "marry [nick] -- marry someone",
      "args": [
        "inp",
        "me",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "marry"
      },
      "triggers": [
        "marry"
      ]
    },
    "plugins/stupid.py:572 pantsumap()": {
      "function": "pantsumap",
      "filename": "plugins/stupid.py",
      "lineno": 572,
      "help": "pantsumap -- returns map of #pantsumen users if channel is #pantsumen",
      "args": [
        "inp",
        "chan",
        "notice"
      ],
      "hook": {
        "autohelp": false,
        "name": "pantsumap"
      },
      "triggers": [
        "pantsumap"
      ]
    },
    "plugins/stupid.py:580 penis()": {
      "function": "penis",
      "filename": "plugins/stupid.py",
      "lineno": 580,
      "help": "penis [nick] -- get penis info for nick",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "penis"
      },
      "triggers": [
        "penis"
      ]
    },
    "plugins/stupid.py:600 tits()": {
      "function": "tits",
      "filename": "plugins/stupid.py",
      "lineno": 600,
      "help": "tits [nick] -- get tits info for nick",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "tits"
      },
      "triggers": [
        "tits"
      ]
    },
    "plugins/stupid.py:620 vagina()": {
      "function": "vagina",
      "filename": "plugins/stupid.py",
      "lineno": 620,
      "help": "vagina [nick] -- get vagina info for nick",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "vagina"
      },
      "triggers": [
        "vagina"
      ]
    },
    "plugins/stupid.py:640 anus()": {
      "function": "anus",
      "filename": "plugins/stupid.py",
      "lineno": 640,
      "help": "anus [nick] -- get chocolate starfish info for nick",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "anus"
      },
      "triggers": [
        "anus"
      ]
    },
    "plugins/stupid.py:660 sudoku()": {
      "function": "sudoku",
      "filename": "plugins/stupid.py",
      "lineno": 660,
      "help": "sudoku -- Makes the bot kick you in [channel].",
      "args": [
        "inp",
        "conn",
        "chan",
        "nick",
        "say"
      ],
      "hook": {
        "autohelp": false,
        "name": "sudoku"
      },
      "triggers": [
        "sudoku",
        "seppuku",
        "anhero",
        "harakiri"
      ]
    },
    "plugins/stupid.py:671 akbar()": {
      "function": "akbar",
      "filename": "plugins/stupid.py",
      "lineno": 671,
      "help": "akbar -- makes the bot kick itsself.",
      "args": [
        "inp",
        "conn",
        "chan",
        "nick",
        "say"
      ],
      "hook": {
        "autohelp": false,
        "name": "akbar"
      },
      "triggers": [
        "akbar"
      ]
    },
    "plugins/stupid.py:682 storyofpomfface()": {
      "function": "storyofpomfface",
      "filename": "plugins/stupid.py",
      "lineno": 682,
      "help": "storyofpomfface -- pomf's origins",
      "args": [
        "inp",
        "reply"
      ],
      "hook": {
        "channeladminonly": true,
        "autohelp": false,
        "name": "storyofpomfface"
      },
      "triggers": [
        "storyofpomfface",
        "storyofrincewindscat"
      ]
    },
    "plugins/stupid.py:695 cowsay()": {
      "function": "cowsay",
      "filename": "plugins/stupid.py",
      "lineno": 695,
      "help": "cowsay [inp] -- cow says your message",
      "args": [
        "inp",
        "reply"
      ],
      "hook": {
        "name": "cowsay"
      },
      "triggers": [
        "cowsay"
      ]
    },
    "plugins/stupid.py:751 hack()": {
      "function": "hack",
      "filename": "plugins/stupid.py",
      "lineno": 751,
      "help": "hack -- hacks...",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "hack"
      },
      "triggers": [
        "hack"
      ]
    },
    "plugins/stupid.py:757 pdawg()": {
      "function": "pdawg",
      "filename": "plugins/stupid.py",
      "lineno": 757,
      "help": "pdawg -- returns a quote from Pdawg",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "pdawg"
      },
      "triggers": [
        "pdawg"
      ]
    },
    "plugins/stupid.py:763 leet()": {
      "function": "leet",
      "filename": "plugins/stupid.py",
      "lineno": 763,
      "help": "leet <text> -- converts text into l33t h4ck3r text",
      "args": [
        "text"
      ],
      "hook": {
        "name": "leet"
      },
      "triggers": [
        "leet"
      ]
    },
    "plugins/stupid.py:800 workout()": {
      "function": "workout",
      "filename": "plugins/stupid.py",
      "lineno": 800,
      "help": "workout [nick] -- gives someone an exercise",
      "args": [
        "inp",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "workout"
      },
      "triggers": [
        "workout"
      ]
    },
    "plugins/stupid.py:811 pushups()": {
      "function": "pushups",
      "filename": "plugins/stupid.py",
      "lineno": 811,
      "help": "pushups [nick] -- gives someone pushups/squats to do",
      "args": [
        "inp",
        "me",
        "paraml"
      ],
      "hook": {
        "autohelp": false,
        "name": "pushups"
      },
      "triggers": [
        "pushups",
        "squats"
      ]
    },
    "plugins/stupid.py:822 madoka()": {
      "function": "madoka",
      "filename": "plugins/stupid.py",
      "lineno": 822,
      "help": "madoka -- see how much Madoka_Miku has mired infinity...",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "madoka"
      },
      "triggers": [
        "madoka"
      ]
    },
    "plugins/stupid.py:828 drink()": {
      "function": "drink",
      "filename": "plugins/stupid.py",
      "lineno": 828,
      "help": "drink [nick] -- drinks someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "drink"
      },
      "triggers": [
        "drink"
      ]
    },
    "plugins/stupid.py:835 fap()": {
      "function": "fap",
      "filename": "plugins/stupid.py",
      "lineno": 835,
      "help": "fap [nick] -- the bot pleasures itself",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "fap"
      },
      "triggers": [
        "fap"
      ]
    },
    "plugins/stupid.py:847 cayoot()": {
      "function": "cayoot",
      "filename": "plugins/stupid.py",
      "lineno": 847,
      "help": "cayoot [nick] -- the bot catcalls someone",
      "args": [
        "inp",
        "nick"
      ],
      "hook": {
        "autohelp": false,
        "name": "cayoot"
      },
      "triggers": [
        "cayoot"
      ]
    },
    "plugins/stupid.py:854 spit()": {
      "function": "spit",
      "filename": "plugins/stupid.py",
      "lineno": 854,
      "help": "spit [nick] -- the bot disrespects someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "spit"
      },
      "triggers": [
        "spit"
      ]
    },
    "plugins/stupid.py:861 pee()": {
      "function": "pee",
      "filename": "plugins/stupid.py",
      "lineno": 861,
      "help": "pee [nick] -- the bot urinates on someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "pee"
      },
      "triggers": [
        "pee"
      ]
    },
    "plugins/stupid.py:868 sniff()": {
      "function": "sniff",
      "filename": "plugins/stupid.py",
      "lineno": 868,
      "help": "sniff [nick] -- the bot sniffs someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "sniff"
      },
      "triggers": [
        "sniff"
      ]
    },
    "plugins/stupid.py:874 lok()": {
      "function": "lok",
      "filename": "plugins/stupid.py",
      "lineno": 874,
      "help": "lok -- bot autocorrects a misspelling of 'lol'",
      "args": [
        "inp"
      ],
      "hook": {
        "autohelp": false,
        "name": "lok"
      },
      "triggers": [
        "lok"
      ]
    },
    "plugins/stupid.py:914 breakfast()": {
      "function": "breakfast",
      "filename": "plugins/stupid.py",
      "lineno": 914,
      "help": "breakfast [nick] -- suggests a breakfast food",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "breakfast"
      },
      "triggers": [
        "breakfast"
      ]
    },
    "plugins/stupid.py:921 rose()": {
      "function": "rose",
      "filename": "plugins/stupid.py",
      "lineno": 921,
      "help": "rose [nick] -- gives rose to a special someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "rose"
      },
      "triggers": [
        "rose"
      ]
    },
    "plugins/stupid.py:930 egg()": {
      "function": "egg",
      "filename": "plugins/stupid.py",
      "lineno": 930,
      "help": "egg [nick] -- gives an egg to a victim",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "egg"
      },
      "triggers": [
        "egg"
      ]
    },
    "plugins/stupid.py:941 banana()": {
      "function": "banana",
      "filename": "plugins/stupid.py",
      "lineno": 941,
      "help": "banana [nick] -- gives a yellow fruit to someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "banana"
      },
      "triggers": [
        "banana"
      ]
    },
    "plugins/stupid.py:947 mango()": {
      "function": "mango",
      "filename": "plugins/stupid.py",
      "lineno": 947,
      "help": "mango [nick] -- gives the king of all fruits to someone special",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "mango"
      },
      "triggers": [
        "mango"
      ]
    },
    "plugins/stupid.py:953 peach()": {
      "function": "peach",
      "filename": "plugins/stupid.py",
      "lineno": 953,
      "help": "peach [nick] -- gives a sweet peach to someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "peach"
      },
      "triggers": [
        "peach"
      ]
    },
    "plugins/stupid.py:959 vax()": {
      "function": "vax",
      "filename": "plugins/stupid.py",
      "lineno": 959,
      "help": "vax [nick] -- vaccinates someone",
      "args": [
        "inp",
        "nick",
        "me"
      ],
      "hook": {
        "autohelp": false,
        "name": "vax"
      },
      "triggers": [
        "vax"
      ]
    },
    "plugins/weather.py:25 weather()": {
      "function": "weather",
      "filename": "plugins/weather.py",
      "lineno": 25,
      "help": "weather <location | @ nick> -- Gets weather data for location or user.",
      "args": [
        "inp",
        "bot",
        "reply",
        "db",
        "nick",
        "notice",
        "paraml"
      ],
      "hook": {
        "autohelp": false,
        "name": "weather"
      },
      "triggers": [
        "weather",
        "forecast",
        "w",
        "t",
        "time",
        "alerts"
      ]
    }
  },
  "events": {
    "plugins/seen.py:85 seen_sieve()": {
      "function": "seen_sieve",
      "filename": "plugins/seen.py",
      "lineno": 85,
      "help": null,
      "events": [
        "PRIVMSG"
      ]
    },
    "plugins/core_misc.py:14 onjoin()": {
      "function": "onjoin",
      "filename": "plugins/core_misc.py",
      "lineno": 14,
      "help": null,
      "events": [
        "004"
      ]
    },
    "plugins/core_misc.py:56 invite()": {
      "function": "invite",
      "filename": "plugins/core_misc.py",
      "lineno": 56,
      "help": null,
      "events": [
        "INVITE"
      ]
    },
    "plugins/core_misc.py:66 onkick()": {
      "function": "onkick",
      "filename": "plugins/core_misc.py",
      "lineno": 66,
      "help": null,
      "events": [
        "KICK"
      ]
    },
    "plugins/core_misc.py:82 onjoined()": {
      "function": "onjoined",
      "filename": "plugins/core_misc.py",
      "lineno": 82,
      "help": "\n    database.set(\n        db, 'users', 'mask',\n        input.mask.lower().replace('~', ''), 'nick', input.nick.lower())\n    ",
      "events": [
        "JOIN"
      ]
    },
    "plugins/core_misc.py:119 onpart()": {
      "function": "onpart",
      "filename": "plugins/core_misc.py",
      "lineno": 119,
      "help": null,
      "events": [
        "PART"
      ]
    },
    "plugins/core_misc.py:130 onnick()": {
      "function": "onnick",
      "filename": "plugins/core_misc.py",
      "lineno": 130,
      "help": null,
      "events": [
        "NICK"
      ]
    },
    "plugins/core_misc.py:139 onmode()": {
      "function": "onmode",
      "filename": "plugins/core_misc.py",
      "lineno": 139,
      "help": null,
      "events": [
        "MODE"
      ]
    },
    "plugins/core_misc.py:175 keep_alive()": {
      "function": "keep_alive",
      "filename": "plugins/core_misc.py",
      "lineno": 175,
      "help": null,
      "events": [
        "004"
      ]
    },
    "plugins/tell.py:28 tellinput()": {
      "function": "tellinput",
      "filename": "plugins/tell.py",
      "lineno": 28,
      "help": null,
      "events": [
        "PRIVMSG"
      ]
    },
    "plugins/log.py:91 log()": {
      "function": "log",
      "filename": "plugins/log.py",
      "lineno": 91,
      "help": null,
      "events": [
        "*"
      ]
    },
    "plugins/core_ctcp.py:117 ctcp_event()": {
      "function": "ctcp_event",
      "filename": "plugins/core_ctcp.py",
      "lineno": 117,
      "help": null,
      "events": [
        "*"
      ]
    },
    "plugins/ai.py:39 ai_sieve()": {
      "function": "ai_sieve",
      "filename": "plugins/ai.py",
      "lineno": 39,
      "help": null,
      "events": [
        "PRIVMSG"
      ]
    },
    "plugins/masshighlight.py:9 onnames()": {
      "function": "onnames",
      "filename": "plugins/masshighlight.py",
      "lineno": 9,
      "help": null,
      "events": [
        "353"
      ]
    },
    "plugins/masshighlight.py:24 onjoined_addhighlight()": {
      "function": "onjoined_addhighlight",
      "filename": "plugins/masshighlight.py",
      "lineno": 24,
      "help": null,
      "events": [
        "JOIN"
      ]
    },
    "plugins/core_admin_channel.py:203 event_handle_autoop()": {
      "function": "event_handle_autoop",
      "filename": "plugins/core_admin_channel.py",
      "lineno": 203,
      "help": null,
      "events": [
        "JOIN"
      ]
    }
  },
  "regexes": {
    "plugins/hashtags.py:110 hashtag()": {
      "function": "hashtag",
      "filename": "plugins/hashtags.py",
      "lineno": 110,
      "help": "?<word> -- Shows what data is associated with <word>.",
      "regexes": [
        "^\\#(\\b\\S+\\b)"
      ]
    },
    "plugins/soundcloud.py:33 soundcloud_url()": {
      "function": "soundcloud_url",
      "filename": "plugins/soundcloud.py",
      "lineno": 33,
      "help": null,
      "regexes": [
        "(.*:)//(www.)?(soundcloud.com)(.*)"
      ]
    },
    "plugins/soundcloud.py:44 sndsc_url()": {
      "function": "sndsc_url",
      "filename": "plugins/soundcloud.py",
      "lineno": 44,
      "help": null,
      "regexes": [
        "(.*:)//(www.)?(snd.sc)(.*)"
      ]
    },
    "plugins/gelbooru.py:143 gelbooru_url()": {
      "function": "gelbooru_url",
      "filename": "plugins/gelbooru.py",
      "lineno": 143,
      "help": null,
      "regexes": [
        "(?:gelbooru.com.*?id=)([-_a-zA-Z0-9]+)"
      ]
    },
    "plugins/twitter.py:29 twitter_url()": {
      "function": "twitter_url",
      "filename": "plugins/twitter.py",
      "lineno": 29,
      "help": null,
      "regexes": [
        "(?:(?:www.twitter.com|twitter.com)/(?:[-_a-zA-Z0-9]+)/status/)([0-9]+)"
      ]
    },
    "plugins/amazon.py:93 amazon_url()": {
      "function": "amazon_url",
      "filename": "plugins/amazon.py",
      "lineno": 93,
      "help": null,
      "regexes": [
        "https?:\\/\\/(www\\.)?amazon.com\\/[^\\s]*dp\\/([A-Za-z0-9]+)[^\\s]*"
      ]
    },
    "plugins/newegg.py:64 newegg_url()": {
      "function": "newegg_url",
      "filename": "plugins/newegg.py",
      "lineno": 64,
      "help": null,
      "regexes": [
        "(?:(?:www.newegg.com|newegg.com)/Product/Product\\.aspx\\?Item=)([-_a-zA-Z0-9]+)"
      ]
    },
    "plugins/twitch.py:102 twitch_urls()": {
      "function": "twitch_urls",
      "filename": "plugins/twitch.py",
      "lineno": 102,
      "help": null,
      "regexes": [
        "https?://(www\\.)?twitch.tv/([a-zA-Z0-9_]+)"
      ]
    },
    "plugins/mediawiki.py:90 drama_url()": {
      "function": "drama_url",
      "filename": "plugins/mediawiki.py",
      "lineno": 90,
      "help": null,
      "regexes": [
        "(https?://encyclopediadramatica\\.wiki/index\\.php/[^ ]+)"
      ]
    },
    "plugins/mediawiki.py:103 wikipedia_url()": {
      "function": "wikipedia_url",
      "filename": "plugins/mediawiki.py",
      "lineno": 103,
      "help": null,
      "regexes": [
        "(https?://en\\.wikipedia\\.org/wiki/[^ ]+)"
      ]
    },
    "plugins/core_ctcp.py:16 ctcp_version()": {
      "function": "ctcp_version",
      "filename": "plugins/core_ctcp.py",
      "lineno": 16,
      "help": null,
      "regexes": [
        "^\\x01VERSION\\x01$"
      ]
    },
    "plugins/core_ctcp.py:21 ctcp_ping()": {
      "function": "ctcp_ping",
      "filename": "plugins/core_ctcp.py",
      "lineno": 21,
      "help": null,
      "regexes": [
        "^\\x01PING"
      ]
    },
    "plugins/core_ctcp.py:27 ctcp_time()": {
      "function": "ctcp_time",
      "filename": "plugins/core_ctcp.py",
      "lineno": 27,
      "help": null,
      "regexes": [
        "^\\x01TIME\\x01$"
      ]
    },
    "plugins/core_ctcp.py:33 ctcp_finger()": {
      "function": "ctcp_finger",
      "filename": "plugins/core_ctcp.py",
      "lineno": 33,
      "help": null,
      "regexes": [
        "^\\x01FINGER\\x01$"
      ]
    },
    "plugins/urls.py:55 process_url()": {
      "function": "process_url",
      "filename": "plugins/urls.py",
      "lineno": 55,
      "help": null,
      "regexes": [
        "(https?://\\S+\\.\\S*)"
      ]
    },
    "plugins/spotify.py:162 spotify_url()": {
      "function": "spotify_url",
      "filename": "plugins/spotify.py",
      "lineno": 162,
      "help": " Match spotify urls and provide blurb and track\n    ",
      "regexes": [
        "(open\\.spotify\\.com\\/(track|album|artist|user)\\/([a-zA-Z0-9]+))"
      ]
    },
    "plugins/google.py:33 image()": {
      "function": "image",
      "filename": "plugins/google.py",
      "lineno": 33,
      "help": "image <query> -- Returns the first Google Image result for <query>.",
      "regexes": [
        "^\\>(.*\\.(gif|jpe?g|png|tiff|bmp))$"
      ]
    },
    "plugins/steam.py:29 steam_url()": {
      "function": "steam_url",
      "filename": "plugins/steam.py",
      "lineno": 29,
      "help": null,
      "regexes": [
        "(.*:)//(store.steampowered.com)(:[0-9]+)?(.*)"
      ]
    },
    "plugins/youtube.py:104 youtube_url()": {
      "function": "youtube_url",
      "filename": "plugins/youtube.py",
      "lineno": 104,
      "help": null,
      "regexes": [
        "(?xi)\n#(https?://)?\n#((www\\.)|(m\\.))? # mobile or regular or none\n (?:youtube.com/[^?\\s]*[?][^\\s]*?v=(?P<VID1>[-_a-zA-Z0-9]+))\n|(?:youtu.be/(?P<VID2>[-_a-zA-Z0-9]+))\n"
      ]
    },
    "plugins/youtube.py:189 youtubeplaylist_url()": {
      "function": "youtubeplaylist_url",
      "filename": "plugins/youtube.py",
      "lineno": 189,
      "help": null,
      "regexes": [
        "(.*:)//(www.youtube.com/playlist|youtube.com/playlist)(:[0-9]+)?(.*)"
      ]
    },
    "plugins/youtube.py:210 youtubeshorts_url()": {
      "function": "youtubeshorts_url",
      "filename": "plugins/youtube.py",
      "lineno": 210,
      "help": null,
      "regexes": [
        "(https?:\\/\\/)?(www\\.)?youtube\\.com\\/shorts\\/([a-zA-Z0-9_]+)"
      ]
    },
    "plugins/vimeo.py:38 vimeo_url()": {
      "function": "vimeo_url",
      "filename": "plugins/vimeo.py",
      "lineno": 38,
      "help": "<vimeo url> -- automatically returns information on the Vimeo video at <url>",
      "regexes": [
        "https?://player\\.vimeo\\.com/video/([0-9]+)"
      ]
    },
    "plugins/stupid.py:528 intensify()": {
      "function": "intensify",
      "filename": "plugins/stupid.py",
      "lineno": 528,
      "help": "intensify <word> -- [EXCITEMENT INTENSIFIES]",
      "regexes": [
        "^\\[(.*)\\]$"
      ]
    },
    "plugins/stupid.py:708 same()": {
      "function": "same",
      "filename": "plugins/stupid.py",
      "lineno": 708,
      "help": "same -- dont feel left out",
      "regexes": [
        "^(same)$"
      ]
    },
    "plugins/stupid.py:715 huehuehue()": {
      "function": "huehuehue",
      "filename": "plugins/stupid.py",
      "lineno": 715,
      "help": "huehuehue -- huebaru?",
      "regexes": [
        "^(HUEHUEHUE)$"
      ]
    },
    "plugins/stupid.py:722 tetete()": {
      "function": "tetete",
      "filename": "plugins/stupid.py",
      "lineno": 722,
      "help": null,
      "regexes": [
        "^(TETETE)$"
      ]
    },
    "plugins/stupid.py:735 woah()": {
      "function": "woah",
      "filename": "plugins/stupid.py",
      "lineno": 735,
      "help": null,
      "regexes": [
        ".*([W|w]+[H|h]+[O|o]+[A|a]+).*"
      ]
    },
    "plugins/stupid.py:742 interject()": {
      "function": "interject",
      "filename": "plugins/stupid.py",
      "lineno": 742,
      "help": null,
      "regexes": [
        ".*([L|l]+[I|i]+[N|n]+[U|u]+[X|x]).*"
      ]
    }
  },
  "sieves": {
    "plugins/core_sieve.py:34 ignoresieve()": {
      "function": "ignoresieve",
      "filename": "plugins/core_sieve.py",
      "lineno": 34
    },
    "plugins/core_sieve.py:57 sieve_suite()": {
      "function": "sieve_suite",
      "filename": "plugins/core_sieve.py",
      "lineno": 57
    },
    "plugins/masshighlight.py:33 highlight_sieve()": {
      "function": "highlight_sieve",
      "filename": "plugins/masshighlight.py",
      "lineno": 33
    }
  }
}
